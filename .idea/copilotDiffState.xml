<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/app/daypass/page.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/daypass/page.tsx" />
              <option name="originalContent" value="// Tipo explícito para archivos INE&#10;&quot;use client&quot;;&#10;&#10;type IneFiles = { frente: File | null, reverso: File | null };&#10;import { JSXElementConstructor, ReactElement, ReactNode, ReactPortal, useState, useEffect } from &quot;react&quot;;&#10;import Header from &quot;@/components/Header&quot;;&#10;import Footer from &quot;@/components/Footer&quot;;&#10;import toast, {Toaster} from &quot;react-hot-toast&quot;;&#10;import {FiPlus, FiTrash2} from &quot;react-icons/fi&quot;;&#10;import Stepper from &quot;@/components/Stepper&quot;;&#10;import axios from &quot;axios&quot;;&#10;import { Country, State, City } from &quot;country-state-city&quot;;&#10;&#10;const CODIGO_PROMO = &quot;PROMO100&quot;;&#10;const DESCUENTO_PROMO = 100;&#10;const PRECIO_PASE = 350;&#10;&#10;&#10;// function getPrecioPase(fecha: string, categoria: string = &quot;general&quot;) {&#10;//     // Obtén el día de la semana: 0=Domingo, 1=Lunes, ..., 6=Sábado&#10;//     const diaSemana = new Date(fecha).getDay();&#10;//     // Lunes a Jueves: 1-4, Viernes a Niños menores de 13 años entran gratis.Domingo: 0, 5, 6&#10;//     if ([1, 2, 3, 4].includes(diaSemana)) {&#10;//         // Lunes a Jueves&#10;//         switch (categoria) {&#10;//             case &quot;general&quot;: return 350;&#10;//             case &quot;grupos&quot;: return 325;&#10;//             case &quot;inapam&quot;: return 300;&#10;//             case &quot;convenios&quot;: return 300;&#10;//             case &quot;locales&quot;: return 250;&#10;//             case &quot;discapacidad&quot;: return 250;&#10;//             default: return 350;&#10;//         }&#10;//     } else {&#10;//         // Viernes a Domingo&#10;//         switch (categoria) {&#10;//             case &quot;general&quot;: return 420;&#10;//             case &quot;grupos&quot;: return 390;&#10;//             case &quot;inapam&quot;: return 360;&#10;//             case &quot;convenios&quot;: return 360;&#10;//             case &quot;locales&quot;: return 300;&#10;//             case &quot;discapacidad&quot;: return 300;&#10;//             default: return 420;&#10;//         }&#10;//     }&#10;// }&#10;&#10;const regexEmail = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;&#10;&#10;const diasSemana = [&quot;Lun&quot;, &quot;Mar&quot;, &quot;Mié&quot;, &quot;Jue&quot;, &quot;Vie&quot;, &quot;Sáb&quot;, &quot;Dom&quot;];&#10;const horarios = [&#10;    &quot;10:00 AM&quot;, &quot;01:00 PM&quot;, &quot;04:00 PM&quot;&#10;];&#10;&#10;function getDiasMes(year: number, month: number) {&#10;    const firstDay = new Date(year, month, 1).getDay(); // 0=domingo&#10;    const lastDate = new Date(year, month + 1, 0).getDate();&#10;    const primerDia = firstDay === 0 ? 6 : firstDay - 1;&#10;    return {&#10;        dias: Array.from({length: lastDate}, (_, i) =&gt; i + 1),&#10;        primerDia,&#10;    };&#10;}&#10;&#10;function formatFechaEs(year: number, month: number, day: number) {&#10;    const fecha = new Date(`${year}-${(month + 1).toString().padStart(2, &quot;0&quot;)}-${day&#10;        .toString()&#10;        .padStart(2, &quot;0&quot;)}T12:00:00`);&#10;    return fecha.toLocaleDateString(&quot;es-MX&quot;, {&#10;        weekday: &quot;long&quot;,&#10;        day: &quot;2-digit&quot;,&#10;        month: &quot;long&quot;,&#10;        year: &quot;numeric&quot;,&#10;    });&#10;}&#10;&#10;export default function DaypassUnicaPage() {&#10;&#10;    const [paises, setPaises] = useState&lt;string[]&gt;([]);&#10;    const [estados, setEstados] = useState&lt;string[]&gt;([]);&#10;    const [ciudades, setCiudades] = useState&lt;string[]&gt;([]);&#10;&#10;useEffect(() =&gt; {&#10;  async function cargarPaises() {&#10;    try {&#10;      const res = await fetch(&quot;https://countriesnow.space/api/v0.1/countries/positions&quot;);&#10;      const data = await res.json();&#10;      const nombres = Array.isArray(data.data)&#10;        ? data.data.map((p: any) =&gt; p.name)&#10;        : [];&#10;      setPaises(nombres);&#10;    } catch (error) {&#10;      console.error(&quot;Error al cargar países:&quot;, error);&#10;    }&#10;  }&#10;&#10;  async function detectarUbicacionPorIP() {&#10;    try {&#10;      const res = await fetch(&quot;https://ipapi.co/json/&quot;);&#10;      const data = await res.json();&#10;&#10;      const pais = data.country_name;      // ej. &quot;Mexico&quot;&#10;      const estado = data.region;          // ej. &quot;Jalisco&quot;&#10;      const ciudad = data.city;            // ej. &quot;Zapopan&quot;&#10;&#10;      console.log(&quot;Detectado por IP:&quot;, pais, estado, ciudad);&#10;&#10;      // Cargamos estados y ciudades según país/estado detectados&#10;      await fetchEstadosDePais(pais);&#10;      await fetchCiudadesDeEstado(pais, estado);&#10;&#10;      // Asignamos la ubicación detectada al visitante 0&#10;      setVisitantes((prev) =&gt; {&#10;        const copia = [...prev];&#10;        copia[0].pais = pais;&#10;        copia[0].estado = estado;&#10;        copia[0].ciudad = ciudad;&#10;        return copia;&#10;      });&#10;    } catch (error) {&#10;      console.error(&quot;Error al detectar ubicación por IP:&quot;, error);&#10;    }&#10;  }&#10;&#10;  cargarPaises();&#10;  detectarUbicacionPorIP();&#10;}, []);&#10;&#10;const fetchEstadosDePais = async (paisNombre: string) =&gt; {&#10;  if (!paisNombre) return;&#10;&#10;  try {&#10;    const res = await fetch(&quot;https://countriesnow.space/api/v0.1/countries/states&quot;, {&#10;      method: &quot;POST&quot;,&#10;      headers: { &quot;Content-Type&quot;: &quot;application/json&quot; },&#10;      body: JSON.stringify({ country: paisNombre }),&#10;    });&#10;&#10;    const data = await res.json();&#10;&#10;    if (data.data &amp;&amp; Array.isArray(data.data.states)) {&#10;      const estados = data.data.states.map((s: any) =&gt; s.name);&#10;      setEstados(estados);&#10;    } else {&#10;      console.warn(&quot;No se encontraron estados para:&quot;, paisNombre);&#10;      setEstados([]);&#10;    }&#10;  } catch (error) {&#10;    console.error(&quot;Error al cargar estados:&quot;, error);&#10;    setEstados([]);&#10;  }&#10;};&#10;&#10;const fetchCiudadesDeEstado = async (paisNombre: string, estadoNombre: string) =&gt; {&#10;  if (!paisNombre || !estadoNombre) return;&#10;&#10;  try {&#10;    const res = await fetch(&quot;https://countriesnow.space/api/v0.1/countries/state/cities&quot;, {&#10;      method: &quot;POST&quot;,&#10;      headers: { &quot;Content-Type&quot;: &quot;application/json&quot; },&#10;      body: JSON.stringify({ country: paisNombre, state: estadoNombre }),&#10;    });&#10;&#10;    const data = await res.json();&#10;&#10;    if (Array.isArray(data.data)) {&#10;      setCiudades(data.data);&#10;    } else {&#10;      console.warn(`No se encontraron ciudades para ${estadoNombre}, ${paisNombre}`);&#10;      setCiudades([]);&#10;    }&#10;  } catch (error) {&#10;    console.error(&quot;Error al cargar ciudades:&quot;, error);&#10;    setCiudades([]);&#10;  }&#10;};&#10;&#10;const handlePaisChange = (idx: number, paisNombre: string) =&gt; {&#10;  setVisitantes((prev) =&gt; {&#10;    const copia = [...prev];&#10;    copia[idx].pais = paisNombre;&#10;    copia[idx].estado = &quot;&quot;;&#10;    copia[idx].ciudad = &quot;&quot;;&#10;    return copia;&#10;  });&#10;&#10;  fetchEstadosDePais(paisNombre);&#10;};&#10;&#10;const handleEstadoChange = (idx: number, estadoNombre: string) =&gt; {&#10;  setVisitantes((prev) =&gt; {&#10;    const copia = [...prev];&#10;    const paisActual = copia[idx].pais; // usamos la copia ya actualizada&#10;    copia[idx].estado = estadoNombre;&#10;    copia[idx].ciudad = &quot;&quot;;&#10;&#10;    fetchCiudadesDeEstado(paisActual, estadoNombre);&#10;&#10;    return copia;&#10;  });&#10;};&#10;const handleCiudadChange = (idx: number, ciudadNombre: string) =&gt; {&#10;  setVisitantes((prev) =&gt; {&#10;    const copia = [...prev];&#10;    copia[idx].ciudad = ciudadNombre;&#10;    return copia;&#10;  });&#10;};&#10;&#10;&#10;&#10;&#10;&#10;    useEffect(() =&gt; {&#10;        localStorage.clear();&#10;    }, []);&#10;    const [visitantes, setVisitantes] = useState([&#10;        {nombre: &quot;&quot;, apellido:&quot;&quot;, correo: &quot;&quot;, celular: &quot;&quot;, cumple: &quot;&quot;, ciudad: &quot;&quot;, estado:&quot;&quot;, pais:&quot;&quot;,tipo: &quot;general&quot;,},&#10;    ]);&#10;    const [touched, setTouched] = useState([&#10;          {&#10;    nombre: false,&#10;    apellido: false,&#10;    correo: false,&#10;    celular: false,&#10;    cumple: false,&#10;    ciudad: false,&#10;    estado: false,&#10;    pais: false,&#10;    ine: false,&#10;  },&#10;    ]);&#10;    // Estado para archivos INE por visitante&#10;    const [ineFiles, setIneFiles] = useState&lt;IneFiles[]&gt;(&#10;        visitantes.map(() =&gt; ({ frente: null, reverso: null }))&#10;    );&#10;    const [codigoPromo, setCodigoPromo] = useState(&quot;&quot;);&#10;    const [promoAplicado, setPromoAplicado] = useState(false);&#10;    const [msgPromo, setMsgPromo] = useState(&quot;&quot;);&#10;    const [descuento, setDescuento] = useState(0);&#10;&#10;    const today = new Date();&#10;    const [mes, setMes] = useState(today.getMonth());&#10;    const [year, setYear] = useState(today.getFullYear());&#10;    const [selectedDay, setSelectedDay] = useState(today.getDate());&#10;    const [selectedTime, setSelectedTime] = useState(&quot;11:00 AM&quot;);&#10;    const [errores, setErrores] = useState(&#10;    visitantes.map(() =&gt; ({&#10;        nombre: &quot;&quot;,&#10;        apellido:&quot;&quot;,&#10;        correo: &quot;&quot;,&#10;        celular: &quot;&quot;,&#10;        cumple: &quot;&quot;,&#10;        ciudad: &quot;&quot;,&#10;        estado: &quot;&quot;,&#10;        pais: &quot;&quot;&#10;    }))&#10;    );&#10;&#10;&#10;    function validateNombre(nombre: string) {&#10;        return nombre.trim().length &gt; 0;&#10;    }&#10;     function validateApellido(apellido: string) {&#10;        return apellido.trim().length &gt; 0;&#10;    }&#10;&#10;    function validateCorreo(correo: string, obligatorio: boolean) {&#10;        if (!correo.trim() &amp;&amp; !obligatorio) return true;&#10;        return regexEmail.test(correo.trim());&#10;    }&#10;&#10;    function validateCelular(celular: string) {&#10;        return /^\d{10,}$/.test(celular.trim());&#10;    }&#10;    const validateCumple = (fecha: string) =&gt; fecha.trim() !== &quot;&quot;;&#10;    const validateCiudad = (ciudad: string) =&gt; ciudad.trim() !== &quot;&quot;;&#10;    const validateEstado = (estado: string) =&gt; estado.trim() !== &quot;&quot;;&#10;    const validatePais = (pais: string) =&gt; pais.trim() !== &quot;&quot;;&#10;    const validateIne = (ine: string) =&gt; ine.trim() !== &quot;&quot;;&#10;&#10;    // Función para verificar si un horario ya pasó cuando es el día de hoy&#10;    function isHorarioPasado(horario: string): boolean {&#10;        const fechaSeleccionada = new Date(year, mes, selectedDay);&#10;        const hoy = new Date();&#10;&#10;        // Si no es el día de hoy, el horario está disponible&#10;        if (fechaSeleccionada.toDateString() !== hoy.toDateString()) {&#10;            return false;&#10;        }&#10;&#10;        // Convertir el horario a formato 24 horas para comparar&#10;        const [tiempo, periodo] = horario.split(' ');&#10;        const [horas, minutos] = tiempo.split(':').map(Number);&#10;&#10;        let horaEn24 = horas;&#10;        if (periodo === 'PM' &amp;&amp; horas !== 12) {&#10;            horaEn24 += 12;&#10;        } else if (periodo === 'AM' &amp;&amp; horas === 12) {&#10;            horaEn24 = 0;&#10;        }&#10;&#10;        // Crear fecha con el horario seleccionado&#10;        const fechaHorario = new Date(year, mes, selectedDay, horaEn24, minutos);&#10;&#10;        // Comparar con la hora actual&#10;        return fechaHorario &lt;= hoy;&#10;    }&#10;&#10;    // Función para verificar si se puede continuar al paso 3&#10;    function puedeAvanzarPaso2(): boolean {&#10;        // Verificar que hay un día y horario seleccionado&#10;        if (!selectedDay || !selectedTime) {&#10;            return false;&#10;        }&#10;&#10;        // Verificar que el horario seleccionado no haya pasado&#10;        return !isHorarioPasado(selectedTime);&#10;    }&#10;&#10;    const puedeContinuar =&#10;        visitantes.every(&#10;            (v, i) =&gt;&#10;                validateNombre(v.nombre) &amp;&amp;&#10;                validateApellido(v.apellido) &amp;&amp;&#10;                validateCelular(v.celular) &amp;&amp;&#10;                validateCorreo(v.correo, i === 0)&#10;        ) &amp;&amp;&#10;        selectedDay &gt; 0 &amp;&amp;&#10;        selectedTime;&#10;type Visitante = {&#10;  nombre: string;&#10;  apellido: string;&#10;  correo: string;&#10;  celular: string;&#10;  cumple: string;&#10;  ciudad: string;&#10;  estado: string;&#10;  pais: string;&#10;  tipo: &quot;adulto&quot; | &quot;nino&quot;; // ← agrega esto&#10;};&#10;&#10;    // Agregar visitante&#10;    const handleAddVisitante = () =&gt; {&#10;        if (visitantes.length &gt;= 10) return;&#10;        setVisitantes((prev) =&gt; [&#10;            ...prev,&#10;            {nombre: &quot;&quot;, apellido:&quot;&quot;, correo: &quot;&quot;, celular: &quot;&quot;, cumple: &quot;&quot;, ciudad: &quot;&quot;, estado:&quot;&quot;, pais:&quot;&quot;,tipo: &quot;adulto&quot;, },&#10;        ]);&#10;        setTouched((prev) =&gt; [&#10;            ...prev,&#10;              {&#10;    nombre: false,&#10;    apellido: false,&#10;    correo: false,&#10;    celular: false,&#10;    cumple: false,&#10;    ciudad: false,&#10;    estado: false,&#10;    pais: false,&#10;    ine: false,&#10;  },&#10;        ]);&#10;        setIneFiles((prev) =&gt; [&#10;            ...prev,&#10;            { frente: null, reverso: null }&#10;        ]);&#10;    };&#10;&#10;    // Cambios por visitante&#10;    const handleVis = (idx: number, campo: 'nombre' |'apellido'| 'correo' | 'celular'| 'cumple'| 'ciudad' | 'estado'| 'pais', valor: string) =&gt; {&#10;        setVisitantes((prev) =&gt; {&#10;            const copia = [...prev];&#10;            copia[idx][campo] = valor;&#10;            return copia;&#10;        });&#10;    };&#10;&#10;  type Campo =&#10;  | 'nombre'&#10;  |'apellido'&#10;  | 'correo'&#10;  | 'celular'&#10;  | 'cumple'&#10;  | 'ciudad'&#10;  | 'estado'&#10;  | 'pais'&#10;  | 'ine';&#10;&#10;const handleBlur = (idx: number, campo: Campo) =&gt; {&#10;  setTouched((prev) =&gt; {&#10;    const copy = [...prev];&#10;    copy[idx][campo] = true;&#10;    return copy;&#10;  });&#10;};&#10;&#10;&#10;    const aplicarPromo = () =&gt; {&#10;        if (codigoPromo.trim().toUpperCase() === CODIGO_PROMO) {&#10;            setPromoAplicado(true);&#10;            setMsgPromo(`¡Descuento de $${DESCUENTO_PROMO} aplicado!`);&#10;            setDescuento(DESCUENTO_PROMO);&#10;            toast.success(`¡Descuento de $${DESCUENTO_PROMO} aplicado!`);&#10;            localStorage.setItem(&quot;promo_aplicada&quot;, &quot;1&quot;);&#10;            localStorage.setItem(&quot;descuentoPromo&quot;, DESCUENTO_PROMO.toString());&#10;            localStorage.setItem(&quot;promo_codigo&quot;, codigoPromo.trim().toUpperCase());&#10;        } else {&#10;            setPromoAplicado(false);&#10;            setMsgPromo(&quot;Código promocional no válido.&quot;);&#10;            setDescuento(0);&#10;            toast.error(&quot;Código promocional no válido.&quot;);&#10;            localStorage.removeItem(&quot;promo_aplicada&quot;);&#10;            localStorage.removeItem(&quot;descuentoPromo&quot;);&#10;            localStorage.removeItem(&quot;promo_codigo&quot;);&#10;        }&#10;    };&#10;&#10;    const {dias, primerDia} = getDiasMes(year, mes);&#10;    const fechaSeleccionada = `${year}-${(mes + 1).toString().padStart(2, &quot;0&quot;)}-${selectedDay.toString().padStart(2, &quot;0&quot;)}`;&#10;    const fechaDisplay = formatFechaEs(year, mes, selectedDay);&#10;&#10;    const [adultos, setAdultos] = useState(1);&#10;    const [ninos, setNinos] = useState(0);&#10;    const [adultos60, setAdultos60] = useState(0);&#10;&#10;    const cantidadAdultos = adultos;&#10;    const cantidadAdultos60 = adultos60;&#10;    const cantidadNinos = ninos;&#10;    const cantidadMenores2 = 0; // Si manejas menores de 2 años, ajusta aquí&#10;    const esGrupo = (cantidadAdultos + cantidadAdultos60) &gt;= 12;&#10;&#10;&#10;const precioAdulto = getPrecioPorTipo(fechaSeleccionada, &quot;adulto&quot;, esGrupo);&#10;const precioAdulto60 = getPrecioPorTipo(fechaSeleccionada, &quot;adulto60&quot;, esGrupo);&#10;const precioNino = getPrecioPorTipo(fechaSeleccionada, &quot;nino&quot;, esGrupo);&#10;const precioMenor2 = getPrecioPorTipo(fechaSeleccionada, &quot;menor2&quot;, esGrupo);&#10;&#10;&#10;&#10;const subtotalAdultos = cantidadAdultos * precioAdulto;&#10;const subtotalAdultos60 = cantidadAdultos60 * precioAdulto60;&#10;const subtotalNinos = cantidadNinos * precioNino;&#10;const subtotalMenores2 = cantidadMenores2 * precioMenor2;&#10;&#10;const subtotal = subtotalAdultos + subtotalAdultos60 + subtotalNinos + subtotalMenores2;&#10;const total = Math.max(subtotal - descuento, 0);&#10;// Porcentajes&#10;const porcentajePlataforma = 0.05;  // 5%&#10;const porcentajeTerminal = 0.05;    // 5% &#10;// const porcentajeIVA = 0.16;         // 16%&#10;&#10;// Descuento aplicado al subtotal&#10;const subtotalConDescuento = Math.max(subtotal - descuento, 0);&#10;&#10;// Montos adicionales&#10;const montoPlataforma = subtotalConDescuento * porcentajePlataforma;&#10;const montoTerminal = subtotalConDescuento * porcentajeTerminal;&#10;// const montoIVA = subtotalConDescuento * porcentajeIVA;&#10;&#10;// Total final&#10;const totalConCargos = subtotalConDescuento + montoPlataforma + montoTerminal;&#10;function calcularCortesias(totalAdultos: number): number {&#10;  if (totalAdultos &gt;= 60) return 4;&#10;  if (totalAdultos &gt;= 45) return 3;&#10;  if (totalAdultos &gt;= 30) return 2;&#10;  if (totalAdultos &gt;= 15) return 1;&#10;  return 0;&#10;}&#10;const totalAdultosUnicos = cantidadAdultos + cantidadAdultos60;&#10;const cortesias = calcularCortesias(totalAdultosUnicos);&#10;&#10;&#10;    // Prepara los datos del formulario para enviar por correo electrónico&#10;    function prepararDatosParaCorreo() {&#10;        const data = {&#10;            visitantes: visitantes.map((v, idx) =&gt; ({&#10;                nombre: v.nombre,&#10;                apellido: v.apellido,&#10;                correo: v.correo,&#10;                celular: v.celular,&#10;                ine_frente: idx === 0 &amp;&amp; ineFiles[idx]?.frente ? ineFiles[idx].frente.name : undefined,&#10;                ine_reverso: idx === 0 &amp;&amp; ineFiles[idx]?.reverso ? ineFiles[idx].reverso.name : undefined,&#10;            })),&#10;            fecha: fechaSeleccionada,&#10;            fechaDisplay: fechaDisplay,&#10;            horario: selectedTime,&#10;            cantidad: visitantes.length,&#10;            subtotal,&#10;            descuento,&#10;            total,&#10;            promoAplicado,&#10;            codigoPromo,&#10;            metodoPago,&#10;        };&#10;        return data;&#10;    }&#10;&#10;    // Genera el cuerpo del correo electrónico en texto plano&#10;    function generarCuerpoCorreo(data: ReturnType&lt;typeof prepararDatosParaCorreo&gt;) {&#10;        const visitantesTxt = data.visitantes.map((v, idx) =&gt;&#10;            `Visitante ${idx + 1}:\n- Nombre: ${v.nombre} \n- Apellido: ${v.apellido}\n- Correo: ${v.correo}\n- Celular: ${v.celular}\n`&#10;            + (idx === 0 ? `- INE Frente: ${v.ine_frente || &quot;No adjunto&quot;}\n- INE Reverso: ${v.ine_reverso || &quot;No adjunto&quot;}\n` : &quot;&quot;)&#10;        ).join('\n');&#10;&#10;        return `&#10;Reserva de DayPass&#10;&#10;Fecha de visita: ${data.fechaDisplay}&#10;Hora de llegada: ${data.horario}&#10;Cantidad de personas: ${data.cantidad}&#10;&#10;${visitantesTxt}&#10;&#10;Subtotal: $${data.subtotal} MXN&#10;${data.promoAplicado ? `Descuento aplicado: -$${data.descuento} MXN\n` : &quot;&quot;}&#10;Total a pagar: $${data.total} MXN&#10;&#10;Método de pago: ${data.metodoPago === &quot;tarjeta&quot; ? &quot;Tarjeta&quot; : &quot;Efectivo&quot;}&#10;${data.codigoPromo ? `Código promocional usado: ${data.codigoPromo}\n` : &quot;&quot;}&#10;&#10;¡Gracias por reservar!&#10;        `.trim();&#10;    }&#10;&#10;    // Guardar y continuar&#10;    const handleSiguiente = () =&gt; {&#10;        localStorage.setItem(&quot;visitantes&quot;, JSON.stringify(visitantes));&#10;        localStorage.setItem(&quot;cantidad&quot;, visitantes.length.toString());&#10;        localStorage.setItem(&quot;fechaVisita&quot;, fechaSeleccionada);&#10;        localStorage.setItem(&quot;horaVisita&quot;, selectedTime);&#10;        window.location.href = &quot;/daypass/extras&quot;;&#10;    };&#10;&#10;    // async function handleContinuar() {&#10;    //     const datos = prepararDatosParaCorreo();&#10;&#10;    //     // Armado exacto de FormData&#10;    //     const formData = new FormData();&#10;&#10;    //     // Visitor principal&#10;    //     const principal = datos.visitantes[0];&#10;    //     formData.append(&quot;visitor[name]&quot;, principal.nombre);&#10;    //     formData.append(&quot;visitor[lastname]&quot;, principal.apellido);&#10;    //     formData.append(&quot;visitor[email]&quot;, principal.correo);&#10;    //     formData.append(&quot;visitor[phone]&quot;, principal.celular);&#10;    //     formData.append(&quot;visitor[type]&quot;, &quot;general&quot;);&#10;&#10;    //     // INE archivos (si existen)&#10;    //     if (ineFiles[0]?.frente) formData.append(&quot;idcard_front&quot;, ineFiles[0].frente, ineFiles[0].frente.name);&#10;    //     if (ineFiles[0]?.reverso) formData.append(&quot;idcard_back&quot;, ineFiles[0].reverso, ineFiles[0].reverso.name);&#10;&#10;    //     // Fecha y hora combinada&#10;    //     const fechaHora = datos.fecha + &quot; &quot; + (datos.horario || &quot;11:00 AM&quot;);&#10;    //     formData.append(&quot;reservation_at&quot;, fechaHora);&#10;&#10;    //     // Totales&#10;    //     formData.append(&quot;totals[total]&quot;, String(datos.total));&#10;&#10;    //     // Promo como JSON vacío o valor real si existe&#10;    //     formData.append(&quot;promo&quot;, datos.promoAplicado ? JSON.stringify({ code: datos.codigoPromo }) : &quot;[]&quot;);&#10;&#10;    //     // Todos los visitantes&#10;    //     datos.visitantes.forEach((v, idx) =&gt; {&#10;    //         formData.append(`visitors[${idx}][name]`, v.nombre);&#10;    //         formData.append(`visitors[${idx}][lastname]`, v.apellido);&#10;    //         formData.append(`visitors[${idx}][email]`, v.correo);&#10;    //         formData.append(`visitors[${idx}][phone]`, v.celular);&#10;    //         formData.append(`visitors[${idx}][type]`, &quot;general&quot;);&#10;    //     });&#10;&#10;    //     try {&#10;    //         const response = await fetch(&quot;/api/reservations&quot;, {&#10;    //             method: &quot;POST&quot;,&#10;    //             body: formData,&#10;    //         });&#10;&#10;    //         if (!response.ok) {&#10;    //             throw new Error(&quot;Error en el envío de la reservación&quot;);&#10;    //         }&#10;&#10;    //         alert(&quot;¡Reservación enviada correctamente!&quot;);&#10;    //         window.location.href = &quot;/daypass/resumen&quot;;&#10;    //     } catch (error) {&#10;    //         alert(&quot;Ocurrió un error al enviar la reservación. Intenta de nuevo.&quot;);&#10;    //         console.error(error);&#10;    //     }&#10;    // }&#10;&#10;    // Métodos de pago y simulación de pago&#10;    const [metodoPago, setMetodoPago] = useState(&quot;efectivo&quot;);&#10;    const [paid, setPaid] = useState(true);&#10;    const [card, setCard] = useState({ name: &quot;&quot;, num: &quot;&quot;, exp: &quot;&quot;, cvc: &quot;&quot; });&#10;    const [isPaying, setIsPaying] = useState(false);&#10;&#10;    function isExpValid(exp: string) {&#10;        // MM/AA&#10;        if (!/^\d{2}\/\d{2}$/.test(exp)) return false;&#10;        const [mm, aa] = exp.split(&quot;/&quot;).map(Number);&#10;        if (mm &lt; 1 || mm &gt; 12) return false;&#10;        return true;&#10;    }&#10;&#10;    function handleExpChange(e: { target: { value: string; }; }) {&#10;        let value = e.target.value.replace(/\D/g, &quot;&quot;);&#10;        if (value.length &gt; 4) value = value.slice(0, 4);&#10;        if (value.length &gt; 2) value = value.slice(0, 2) + &quot;/&quot; + value.slice(2);&#10;        setCard(card =&gt; ({ ...card, exp: value }));&#10;    }&#10;&#10;    function handlePay(e: { preventDefault: () =&gt; void; }) {&#10;        e.preventDefault();&#10;        if (!isExpValid(card.exp)) return;&#10;        setIsPaying(true);&#10;        setTimeout(() =&gt; {&#10;            setPaid(true);&#10;            setIsPaying(false);&#10;        }, 1500);&#10;    }&#10;&#10;    function renderError(message: ReactNode, show: boolean) {&#10;        return (&#10;            &lt;div style={{ minHeight: &quot;20px&quot; }}&gt;&#10;                {show &amp;&amp; (&#10;                    &lt;span className=&quot;text-xs text-red-700 font-bold&quot;&gt;&#10;                        {message}&#10;                    &lt;/span&gt;&#10;                )}&#10;            &lt;/div&gt;&#10;        );&#10;    }&#10;&#10;    const handlePrevMonth = () =&gt; {&#10;        if (mes === 0) {&#10;            setMes(11);&#10;            setYear(year - 1);&#10;        } else {&#10;            setMes(mes - 1);&#10;        }&#10;        setSelectedDay(1);&#10;    };&#10;    const handleNextMonth = () =&gt; {&#10;        if (mes === 11) {&#10;            setMes(0);&#10;            setYear(year + 1);&#10;        } else {&#10;            setMes(mes + 1);&#10;        }&#10;        setSelectedDay(1);&#10;    };&#10;    // Para eliminar visitante&#10;    const handleRemoveVisitante = (idx: number) =&gt; {&#10;        setVisitantes((prev) =&gt; prev.filter((_, i) =&gt; i !== idx));&#10;        setTouched((prev) =&gt; prev.filter((_, i) =&gt; i !== idx));&#10;        setIneFiles((prev) =&gt; prev.filter((_, i) =&gt; i !== idx));&#10;    };&#10;    // Puede finalizar en efectivo&#10;    const puedeFinalizarEfectivo =&#10;      validateNombre(visitantes[0]?.nombre) &amp;&amp;&#10;      validateNombre(visitantes[0]?.apellido) &amp;&amp;&#10;      validateCelular(visitantes[0]?.celular) &amp;&amp;&#10;      validateCorreo(visitantes[0]?.correo, true) &amp;&amp;&#10;      ineFiles[0]?.frente &amp;&amp;&#10;      ineFiles[0]?.reverso;&#10;&#10;    // Guardar automáticamente visitantes, total, fechaVisita y horaVisita en localStorage&#10;    useEffect(() =&gt; {&#10;        const data = {&#10;            visitantes,&#10;            total,&#10;            fechaVisita: fechaSeleccionada,&#10;            horaVisita: selectedTime,&#10;        };&#10;        localStorage.setItem(&quot;reserva_data&quot;, JSON.stringify(data));&#10;        console.log(&quot;Datos de la reserva guardados en localStorage:&quot;, data);&#10;    }, [visitantes, total, fechaSeleccionada, selectedTime]);&#10;&#10;    // Handler para cambios de archivo INE&#10;    const handleIneFileChange = (idx: number, tipo: 'frente' | 'reverso', file: File | null) =&gt; {&#10;        setIneFiles((prev) =&gt; {&#10;            const copia = [...prev];&#10;            copia[idx][tipo] = file;&#10;            return copia;&#10;        });&#10;    };&#10;&#10;    const [paso, setPaso] = useState(1);&#10;    const pasos = [&#10;        { label: &quot;Huéspedes&quot;, paso: 1 },&#10;        { label: &quot;Fecha y Tiempo&quot;, paso: 2 },&#10;        { label: &quot;Verificar&quot;, paso: 3 },&#10;&#10;    ];&#10;&#10;    const imagenes = [&#10;        &quot;/assets/img-4.webp&quot;,      // Paso 1&#10;        &quot;/assets/img-5.webp&quot;,        // Paso 2&#10;        &quot;/image.png&quot;,   // Paso 3&#10;    ];&#10;&#10;&#10;    const hoy = new Date();&#10;    hoy.setHours(0,0,0,0);&#10;&#10;    const prevMonth = mes === 0 ? 11 : mes - 1;&#10;    const prevYear = mes === 0 ? year - 1 : year;&#10;    const lastDayPrevMonth = new Date(prevYear, prevMonth + 1, 0); // último día del mes anterior&#10;    lastDayPrevMonth.setHours(0,0,0,0);&#10;&#10;    const puedeIrMesAnterior = lastDayPrevMonth &gt;= hoy;&#10;&#10;  async function handleContinuar() {&#10;  const formData = new FormData();&#10;&#10;  // Tipado explícito y manejo de nombre completo&#10;  function separarNombreApellido(nombreCompleto: string): [string, string] {&#10;    const partes = nombreCompleto.trim().split(&quot; &quot;);&#10;    const nombre = partes.shift() || &quot;Nombre&quot;;&#10;    const apellido = partes.join(&quot; &quot;) || &quot;Apellido&quot;;&#10;    return [nombre, apellido];&#10;  }&#10;&#10;  const responsable = visitantes[0];&#10;  const [nombre, apellido] = separarNombreApellido(responsable.nombre);&#10;&#10;  // Información del cliente principal&#10;  formData.append(&quot;client[name]&quot;, nombre);&#10;  formData.append(&quot;client[lastname]&quot;, apellido);&#10;  formData.append(&quot;client[email]&quot;, responsable.correo || &quot;&quot;);&#10;  formData.append(&quot;client[phone]&quot;, responsable.celular || &quot;&quot;);&#10;  formData.append(&quot;client[birthdate]&quot;, responsable.cumple || &quot;&quot;);&#10;  formData.append(&quot;visit_date&quot;, fechaSeleccionada || &quot;&quot;);&#10;  formData.append(&quot;origin_city&quot;, responsable.ciudad || &quot;&quot;);&#10;  formData.append(&quot;payment_method&quot;, metodoPago || &quot;&quot;);&#10;&#10;  // Información de cada visitante&#10;  visitantes.forEach((v, idx) =&gt; {&#10;    const [n, a] = separarNombreApellido(v.nombre);&#10;&#10;    formData.append(`visitors[${idx}][name]`, n);&#10;    formData.append(`visitors[${idx}][lastname]`, a);&#10;    formData.append(`visitors[${idx}][birthdate]`, v.cumple || &quot;&quot;);&#10;    formData.append(`visitors[${idx}][email]`, v.correo || &quot;&quot;);&#10;    formData.append(`visitors[${idx}][phone]`, v.celular || &quot;&quot;);&#10;    formData.append(`visitors[${idx}][visitor_type_id]`, v.tipo === &quot;nino&quot; ? &quot;2&quot; : &quot;1&quot;);&#10;    formData.append(`visitors[${idx}][checkin_time]`, selectedTime?.substring(0, 5) || &quot;&quot;);&#10;&#10;    if (idx === 0) {&#10;      formData.append(`visitors[${idx}][document_type]`, &quot;INE&quot;);&#10;&#10;      if (ineFiles[idx]?.frente) {&#10;        formData.append(`visitors[${idx}][document_front]`, ineFiles[idx].frente, ineFiles[idx].frente.name);&#10;      }&#10;&#10;      if (ineFiles[idx]?.reverso) {&#10;        formData.append(`visitors[${idx}][document_back]`, ineFiles[idx].reverso, ineFiles[idx].reverso.name);&#10;      }&#10;    }&#10;  });&#10;&#10;  // Debug: revisar lo que se está enviando&#10;  for (const pair of formData.entries()) {&#10;    console.log(pair[0] + &quot;: &quot;, pair[1]);&#10;  }&#10;&#10;  try {&#10;    const res = await fetch(&quot;https://lasjaras-api.kerveldev.com/api/reservations&quot;, {&#10;      method: &quot;POST&quot;,&#10;      headers: {&#10;        Accept: &quot;application/json&quot;,&#10;      },&#10;      body: formData,&#10;    });&#10;&#10;    const json = await res.json();&#10;&#10;    if (!res.ok) {&#10;      console.error(&quot;Error al enviar reserva:&quot;, json);&#10;      alert(&quot;Error al enviar la reservación. Revisa los campos e intenta nuevamente.&quot;);&#10;      return;&#10;    }&#10;&#10;    console.log(&quot;Reserva enviada correctamente:&quot;, json);&#10;    window.location.href = &quot;/daypass/resumen&quot;;&#10;  } catch (error) {&#10;    console.error(&quot;Error inesperado:&quot;, error);&#10;    alert(&quot;Ocurrió un error al procesar la reservación.&quot;);&#10;  }&#10;}&#10;&#10;&#10;function getPrecioPorTipo(&#10;  fecha: string,&#10;  tipo: &quot;adulto&quot; | &quot;adulto60&quot; | &quot;nino&quot; | &quot;menor2&quot;,&#10;  esGrupo: boolean = false&#10;) {&#10;  const [year, month, day] = fecha.split(&quot;-&quot;);&#10;  const fechaLocal = new Date(Number(year), Number(month) - 1, Number(day));&#10;  const diaSemana = fechaLocal.getDay(); // 0=Domingo, ..., 6=Sábado&#10;&#10;  const esLunesAJueves = diaSemana &gt;= 1 &amp;&amp; diaSemana &lt;= 4;&#10;&#10;  if (tipo === &quot;adulto&quot;) {&#10;    if (esGrupo) return esLunesAJueves ? 325 : 390;&#10;    return esLunesAJueves ? 350 : 420;&#10;  }&#10;&#10;  if (tipo === &quot;adulto60&quot;) {&#10;    if (esGrupo) return esLunesAJueves ? 300 : 360;&#10;    return esLunesAJueves ? 300 : 360;&#10;  }&#10;&#10;  if (tipo === &quot;nino&quot;) return 70;&#10;  if (tipo === &quot;menor2&quot;) return 0;&#10;&#10;  return 0;&#10;}&#10;&#10;&#10;&#10;// ------------------------------------------------------------ RETURN --------------------------------------------------------------&#10;    return (&#10;&#10;&#10;        &lt;div className=&quot;min-h-screen flex flex-col bg-[#f8fafc]&quot;&gt;&#10;            &lt;Toaster position=&quot;top-center&quot; /&gt;&#10;            {/* &lt;Header /&gt; */}&#10;&#10;&#10;&#10;            {/* &lt;h1 className=&quot;text-2xl font-bold text-center mb-8 text-[#18668b] pt-12&quot;&gt;&#10;                Completa tu Reservación y Agenda tu Visita&#10;            &lt;/h1&gt; */}&#10;            &lt;main className=&quot;flex flex-row w-full min-h-[calc(100vh-120px)] max-w-none&quot;&gt;&#10;&#10;            &lt;section className=&quot;w-full md:w-1/2 flex flex-col justify-center px-8 py-12&quot;&gt;&#10;                 {/* Stepper visual */}&#10;            &lt;div className=&quot;flex items-center justify-center gap-6 mt-0 mb-auto&quot;&gt;&#10;              {paso &gt; 1 &amp;&amp; (&#10;                &lt;button&#10;                  type=&quot;button&quot;&#10;                  onClick={() =&gt; setPaso(paso - 1)}&#10;                  className=&quot;mr-4 flex items-center justify-center text-[#18668b] hover:text-[#14526d] transition&quot;&#10;                  title=&quot;Regresar al paso anterior&quot;&#10;                &gt;&#10;                  &lt;svg width=&quot;24&quot; height=&quot;24&quot; fill=&quot;none&quot; stroke=&quot;currentColor&quot; strokeWidth=&quot;2&quot; viewBox=&quot;0 0 24 24&quot;&gt;&#10;                    &lt;path d=&quot;M15 19l-7-7 7-7&quot; strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot;/&gt;&#10;                  &lt;/svg&gt;&#10;                &lt;/button&gt;&#10;              )}&#10;              {pasos.map((step, idx) =&gt; {&#10;                const completado = paso &gt; step.paso;&#10;                const activo = paso === step.paso;&#10;                return (&#10;                  &lt;div key={step.label} className=&quot;flex flex-col items-center min-w-[90px]&quot;&gt;&#10;                    &lt;span&#10;                      className={`text-sm font-semibold pb-1 transition&#10;                        ${activo || completado&#10;                          ? &quot;text-[#18668b]&quot;&#10;                          : &quot;text-gray-400&quot;&#10;                        }`}&#10;                    &gt;&#10;                      {step.label}&#10;                    &lt;/span&gt;&#10;                    &lt;div&#10;                      className={`w-full h-1 mt-1 rounded&#10;                        ${activo || completado&#10;                          ? &quot;bg-[#18668b]&quot;&#10;                          : &quot;bg-gray-200&quot;&#10;                        }`}&#10;                    /&gt;&#10;                  &lt;/div&gt;&#10;                );&#10;              })}&#10;            &lt;/div&gt;&#10;                {/* paso 1: Huéspedes */}&#10;                {paso === 1 &amp;&amp; (&#10;                    &lt;&gt;&#10;                        &lt;div className=&quot;text-gray-700 text-5xl font-bold mb-6 mt-2&quot;&gt;&#10;                            ¿Cuántos visitantes son?&#10;                        &lt;/div&gt;&#10;                        &lt;p className=&quot;mb-10 text-gray-600 text-2xl&quot;&gt;&#10;                        El precio varía según el horario. Niños menores de 2 años entran gratis.&#10;                        &lt;/p&gt;&#10;                        &lt;div className=&quot;space-y-6 mb-0 mt-auto&quot;&gt;&#10;                            {/* Adultos */}&#10;                            &lt;div className=&quot;flex items-center justify-between bg-white rounded shadow p-5 mb-10 &quot;&gt;&#10;                                &lt;span className=&quot;font-semibold text-lg&quot;&gt;Adultos 14 +&lt;/span&gt;&#10;                                &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;                                    &lt;button&#10;                                        type=&quot;button&quot;&#10;                                        className=&quot;px-3 py-1 rounded text-xl font-bold bg-gray-200 hover:bg-[#302f2f] text-black hover:text-white&quot;&#10;                                        onClick={() =&gt; {&#10;                                            if (adultos &gt; 1) {&#10;                                                setAdultos(adultos - 1);&#10;                                                setVisitantes((prev) =&gt; {&#10;                                                    const nuevo = prev.slice(0, prev.length - 1);&#10;                                                    // Siempre deja al menos un visitante&#10;                                                    return nuevo.length === 0 ? [{ nombre: &quot;&quot;, apellido:&quot;&quot;, correo: &quot;&quot;, celular: &quot;&quot;, cumple: &quot;&quot;, ciudad:&quot;&quot;, estado:&quot;&quot;, pais:&quot;&quot;,tipo: &quot;adulto&quot;,}] : nuevo;&#10;                                                });&#10;                                                setTouched((prev) =&gt; {&#10;                                                    const nuevo = prev.slice(0, prev.length - 1);&#10;                                                    return nuevo.length === 0 ? [ {nombre: false, apellido:false, correo: false, celular: false, cumple: false, ciudad: false, estado: false, pais: false, ine: false,}] : nuevo;&#10;                                                });&#10;                                                setIneFiles((prev) =&gt; {&#10;                                                    const nuevo = prev.slice(0, prev.length - 1);&#10;                                                    return nuevo.length === 0 ? [{ frente: null, reverso: null }] : nuevo;&#10;                                                });&#10;                                                // Si al bajar adultos hay más niños que el nuevo máximo, ajusta niños&#10;                                                if (ninos &gt; (adultos - 1) * 2) setNinos((adultos - 1) * 2);&#10;                                            }&#10;                                        }}&#10;                                        disabled={adultos &lt;= 1}&#10;                                    &gt;-&lt;/button&gt;&#10;                                    &lt;span className=&quot;text-xl font-bold&quot;&gt;{adultos}&lt;/span&gt;&#10;                                    &lt;button&#10;                                        type=&quot;button&quot;&#10;                                        className=&quot;px-3 py-1 rounded text-xl font-bold bg-gray-200 hover:bg-[#302f2f] text-black hover:text-white&quot;&#10;                                        onClick={() =&gt; {&#10;&#10;                                                setAdultos(adultos + 1);&#10;                                                setVisitantes((prev) =&gt; [...prev, { nombre: &quot;&quot;, apellido:&quot;&quot;, correo: &quot;&quot;, celular: &quot;&quot;, cumple:&quot;&quot;, ciudad:&quot;&quot;,estado:&quot;&quot;,pais:&quot;&quot;,tipo: &quot;adulto&quot;,}]);&#10;                                                setTouched((prev) =&gt; [...prev, {nombre: false, apellido:false, correo: false, celular: false, cumple: false, ciudad: false, estado: false, pais: false, ine: false,}]);&#10;                                                setIneFiles((prev) =&gt; [...prev, { frente: null, reverso: null }]);&#10;&#10;                                        }}&#10;                                    &gt;+&lt;/button&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                             {/* Adultos 60+ */}&#10;                            &lt;div className=&quot;flex items-center justify-between bg-white rounded shadow p-5 mb-10 &quot;&gt;&#10;                                &lt;span className=&quot;font-semibold text-lg&quot;&gt;Adultos 60 +&lt;/span&gt;&#10;                                &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;                                    &lt;button&#10;                                        type=&quot;button&quot;&#10;                                        className=&quot;px-3 py-1 rounded text-xl font-bold bg-gray-200 hover:bg-[#302f2f] text-black hover:text-white&quot;&#10;                                        onClick={() =&gt; {&#10;                                            if (adultos60 &gt; 0) {&#10;                                                setAdultos60(adultos60 - 1);&#10;                                                setVisitantes((prev) =&gt; {&#10;                                                    const nuevo = prev.slice(0, prev.length - 1);&#10;                                                    return nuevo;&#10;                                                });&#10;                                                setTouched((prev) =&gt; {&#10;                                                    const nuevo = prev.slice(0, prev.length - 1);&#10;                                                    return nuevo.length === 0 ? [{nombre: false, apellido: false, correo: false, celular: false, cumple: false, ciudad: false, estado: false, pais: false, ine: false,}] : nuevo;&#10;                                                });&#10;                                                setIneFiles((prev) =&gt; {&#10;                                                    const nuevo = prev.slice(0, prev.length - 1);&#10;                                                    return nuevo.length === 0 ? [{ frente: null, reverso: null }] : nuevo;&#10;                                                });&#10;&#10;                                            }&#10;                                        }}&#10;                                        disabled={adultos60 &lt;= 0}&#10;&#10;                                    &gt;-&lt;/button&gt;&#10;                                    &lt;span className=&quot;text-xl font-bold&quot;&gt;{adultos60}&lt;/span&gt;&#10;                                    &lt;button&#10;                                        type=&quot;button&quot;&#10;                                        className=&quot;px-3 py-1 rounded text-xl font-bold bg-gray-200 hover:bg-[#302f2f] text-black hover:text-white&quot;&#10;                                        onClick={() =&gt; {&#10;&#10;                                                setAdultos60(adultos60 + 1);&#10;                                                setVisitantes((prev) =&gt; [...prev, { nombre: &quot;&quot;, apellido:&quot;&quot;, correo: &quot;&quot;, celular: &quot;&quot; , cumple:&quot;&quot;, ciudad:&quot;&quot;, estado:&quot;&quot;, pais:&quot;&quot;,tipo: &quot;adulto&quot;, }]);&#10;                                                setTouched((prev) =&gt; [...prev, {nombre: false, apellido:false, correo: false, celular: false, cumple: false, ciudad: false, estado: false, pais: false, ine: false,}]);&#10;                                                setIneFiles((prev) =&gt; [...prev, { frente: null, reverso: null }]);&#10;&#10;                                        }}&#10;                                    &gt;+&lt;/button&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                            {/* Niños */}&#10;                            &lt;div className=&quot;flex items-center justify-between bg-white rounded shadow p-5 &quot;&gt;&#10;                                    &lt;span className=&quot;font-semibold text-lg&quot;&gt;Niños 2 - 13&lt;/span&gt;&#10;                                    &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;                                    &lt;button&#10;                                        type=&quot;button&quot;&#10;                                        className=&quot;px-3 py-1 rounded text-xl font-bold bg-gray-200 hover:bg-[#302f2f] text-black hover:text-white&quot;&#10;                                       onClick={() =&gt; {&#10;                                        if (ninos &gt; 0) {&#10;                                            setNinos(ninos - 1);&#10;&#10;                                            // Filtrar visitantes para eliminar el último niño&#10;                                            setVisitantes((prev) =&gt; {&#10;                                                const sinUltimoNino = [...prev];&#10;                                                const idxUltimoNino = [...prev].map(v =&gt; v.tipo).lastIndexOf(&quot;nino&quot;);&#10;                                                if (idxUltimoNino !== -1) sinUltimoNino.splice(idxUltimoNino, 1);&#10;                                                return sinUltimoNino;&#10;                                            });&#10;                                        }&#10;                                    }}&#10;                                        disabled={ninos &lt;= 0}&#10;                                    &gt;-&lt;/button&gt;&#10;                                    &lt;span className=&quot;text-xl font-bold&quot;&gt;{ninos}&lt;/span&gt;&#10;                                    &lt;button&#10;                                        type=&quot;button&quot;&#10;                                        className=&quot;px-3 py-1 rounded text-xl font-bold bg-gray-200 hover:bg-[#302f2f] text-black hover:text-white&quot;&#10;                                        onClick={() =&gt; {&#10;                                            if (ninos &lt; adultos * 2) {&#10;                                                setNinos(ninos + 1);&#10;                                                setVisitantes((prev) =&gt; [&#10;                                                    ...prev,&#10;                                                    { nombre: &quot;&quot;,apellido: &quot;&quot;, correo: &quot;&quot;, celular: &quot;&quot; , cumple:&quot;&quot;, ciudad:&quot;&quot;, estado:&quot;&quot;, pais:&quot;&quot;,tipo: &quot;nino&quot; } // Solo nombre y cumpleaños para niños&#10;                                                ]);&#10;                                                setTouched((prev) =&gt; [&#10;                                                    ...prev,&#10;                                                    {nombre: false,apellido: false, correo: false, celular: false, cumple: false, ciudad: false, estado: false, pais: false, ine: false,}&#10;                                                ]);&#10;                                                setIneFiles((prev) =&gt; [&#10;                                                    ...prev,&#10;                                                    { frente: null, reverso: null }&#10;                                                ]);&#10;                                            }&#10;                                        }}&#10;                                        disabled={ninos &gt;= adultos * 2}&#10;                                    &gt;+&lt;/button&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                        {ninos &gt; 0 &amp;&amp; (&#10;                        &lt;div className=&quot;bg-[#ffff0009] border-l-4 border-yellow-400 p-4 -mb-20 text-sm text-gray-700 mt-2&quot;&gt;&#10;                            Los niños de 2 a 13 años deben estar acompañados por un adulto. No incluye acceso al jardín termal, acceso GRATIS para niños menores de 2 años.&#10;                        &lt;/div&gt;&#10;                        )}&#10;&#10;                         {adultos60 &gt; 0 &amp;&amp; (&#10;                        &lt;div className=&quot;bg-[#ffff0009] border-l-4 border-yellow-400 p-4 -mb-41 text-sm text-gray-700 mt-23&quot;&gt;&#10;                           Los adultos mayores de 60 años de edad deberán presentar tarjeda del INAPAM actualizada, de lo contrario se cobrará la entrada a precio regular.&#10;                        &lt;/div&gt;&#10;                        )}&#10;                         {adultos + adultos60 &gt;= 12 &amp;&amp; (&#10;                        &lt;div className=&quot;bg-[#ffff0009] border-l-4 border-yellow-400 p-4 -mb-49 text-sm text-gray-700 mt-44&quot;&gt;&#10;                           Al reservar para 12 o más adultos, se aplicará automáticamente una tarifa preferencial. Para grupos de 15 personas o más, se otorgarán cortesías proporcionales según la cantidad total de asistentes (los precios y cortesias se veran reflejados en el calculo final).&#10;&#10;                        &lt;/div&gt;&#10;                        )}&#10;                        &lt;button&#10;                        className={`w-full py-7 rounded font-bold text-white mt-50 transition-colors ${&#10;                            puedeAvanzarPaso2()&#10;                                ? &quot;bg-gradient-to-r bg-[#62a7c7] hover:bg-[#14526d] cursor-pointer&quot;&#10;                                : &quot;bg-gray-400 cursor-not-allowed&quot;&#10;                        }`}&#10;                        onClick={() =&gt; setPaso(2)}&#10;                        &gt;&#10;                        Continuar&#10;                        &lt;/button&gt;&#10;                    &lt;/&gt;&#10;                )}&#10;&#10;&#10;                {/* Paso 2: Fecha y horario */}&#10;                {paso === 2 &amp;&amp; (&#10;                &lt;&gt;&#10;                    &lt;div className=&quot; text-gray-700 text-4xl font-bold mb-6 mt-10&quot;&gt;&#10;                        Selecciona la fecha y el horario de tu visita&#10;                    &lt;/div&gt;&#10;                     &lt;p className=&quot; mb-20 text-gray-600 text-2xl&quot;&gt;&#10;                        Estamos abiertos todos los días del año.&#10;                        &lt;/p&gt;&#10;&#10;                    &lt;div className=&quot;flex flex-col md:flex-row gap-6 -mb-10 &quot;&gt;&#10;                      {/* Calendario*/}&#10;                        &lt;div className=&quot;w-full max-w-4xl mx-auto p-0&quot;&gt;&#10;                        &lt;div className=&quot;bg-white border rounded-lg p-10 shadow-md&quot;&gt;&#10;                            {/* Navegación */}&#10;                            &lt;div className=&quot;flex items-center justify-between mb-6&quot;&gt;&#10;                            &lt;button&#10;                                className={`text-sm font-bold hover:underline ${&#10;                                puedeIrMesAnterior&#10;                                    ? &quot;text-[#688b18] cursor-pointer&quot;&#10;                                    : &quot;text-gray-400 cursor-not-allowed&quot;&#10;                                }`}&#10;                                onClick={handlePrevMonth}&#10;                                type=&quot;button&quot;&#10;                                disabled={!puedeIrMesAnterior}&#10;                            &gt;&#10;                                ← Mes anterior&#10;                            &lt;/button&gt;&#10;                            &lt;span className=&quot;text-lg font-bold capitalize&quot;&gt;&#10;                                {new Date(year, mes).toLocaleDateString(&quot;es-MX&quot;, {&#10;                                month: &quot;long&quot;,&#10;                                year: &quot;numeric&quot;,&#10;                                })}&#10;                            &lt;/span&gt;&#10;                            &lt;button&#10;                                className=&quot;text-sm text-[#18668b] font-bold hover:underline&quot;&#10;                                onClick={handleNextMonth}&#10;                                type=&quot;button&quot;&#10;                            &gt;&#10;                                Mes siguiente →&#10;                            &lt;/button&gt;&#10;                            &lt;/div&gt;&#10;&#10;                            {/* Días de la semana */}&#10;                            &lt;div className=&quot;grid grid-cols-7 text-center text-sm font-semibold mb-2&quot;&gt;&#10;                            {diasSemana.map((dia) =&gt; (&#10;                                &lt;span key={dia} className=&quot;text-gray-600&quot;&gt;{dia}&lt;/span&gt;&#10;                            ))}&#10;                            &lt;/div&gt;&#10;&#10;                            {/* Días del mes */}&#10;                            &lt;div className=&quot;grid grid-cols-7 gap-2&quot;&gt;&#10;                            {[...Array(primerDia).keys()].map((_, i) =&gt; (&#10;                                &lt;div key={&quot;empty-&quot; + i}&gt;&lt;/div&gt;&#10;                            ))}&#10;                            {dias.map((dia) =&gt; {&#10;                                // Calcula la fecha completa del día actual en el mes&#10;                                const fechaBtn = new Date(year, mes, dia);&#10;                                const hoy = new Date();&#10;                                hoy.setHours(0,0,0,0); // Ignora la hora&#10;&#10;                                const isSelected = selectedDay === dia;&#10;                                const isDisabled = fechaBtn &lt; hoy;&#10;&#10;                                return (&#10;                                    &lt;button&#10;                                        key={dia}&#10;                                        type=&quot;button&quot;&#10;                                        onClick={() =&gt; !isDisabled &amp;&amp; setSelectedDay(dia)}&#10;                                        disabled={isDisabled}&#10;                                        className={`w-12 h-12 text-base rounded-full border flex items-center justify-center transition&#10;                                            ${isSelected&#10;                                                ? &quot;bg-[#18668b] text-white border-[#18668b]&quot;&#10;                                                : isDisabled&#10;                                                    ? &quot;bg-gray-100 text-gray-400 border-gray-200 cursor-not-allowed&quot;&#10;                                                    : &quot;bg-white hover:bg-gray-100 border-gray-300 text-gray-700&quot;&#10;                                            }&#10;                                        `}&#10;                                    &gt;&#10;                                        {dia}&#10;                                    &lt;/button&gt;&#10;                                );&#10;                            })}&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                      {/* Horarios */}&#10;                      &#10;                    &lt;div className=&quot;w-full md:w-1/2&quot;&gt;&#10;                      &lt;p className=&quot; mb-10 text-gray-800 text-base font-bold&quot;&gt;&#10;                        Selecciona tu horario de llegada.&#10;                        &lt;/p&gt;&#10;                        &lt;div className=&quot;grid grid-cols-1 md:grid-cols-1 gap-10&quot;&gt;&#10;                            {horarios.map((hora) =&gt; {&#10;                                const horarioPasado = isHorarioPasado(hora);&#10;                                return (&#10;                                    &lt;button&#10;                                        key={hora}&#10;                                        type=&quot;button&quot;&#10;                                        disabled={horarioPasado}&#10;                                        className={`rounded border py-2 font-semibold text-sm w-full transition&#10;                                            ${horarioPasado&#10;                                                ? &quot;bg-gray-100 text-gray-400 border-gray-200 cursor-not-allowed&quot;&#10;                                                : selectedTime === hora&#10;                                                    ? &quot;bg-[#18668b] text-white border-[#18668b]&quot;&#10;                                                    : &quot;bg-white border-gray-300 hover:bg-gray-100 text-gray-800&quot;&#10;                                            }&#10;                                        `}&#10;                                        onClick={() =&gt; !horarioPasado &amp;&amp; setSelectedTime(hora)}&#10;                                    &gt;&#10;                                        {hora} {horarioPasado &amp;&amp; &quot;(No disponible)&quot;}&#10;                                    &lt;/button&gt;&#10;                                );&#10;                            })}&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;&#10;                   &lt;button&#10;                        className={`w-full py-7 rounded font-bold text-white mt-30 transition-colors ${&#10;                            puedeAvanzarPaso2()&#10;                                ? &quot;bg-gradient-to-r bg-[#62a7c7] hover:bg-[#14526d] cursor-pointer&quot;&#10;                                : &quot;bg-gray-400 cursor-not-allowed&quot;&#10;                        }`}&#10;                        onClick={() =&gt; puedeAvanzarPaso2() &amp;&amp; setPaso(3)}&#10;                        disabled={!puedeAvanzarPaso2()}&#10;                        &gt;&#10;                        Continuar&#10;                        &lt;/button&gt;&#10;                &lt;/&gt;&#10;                )}&#10;&#10;&#10;                {/* Paso 3:  */}&#10;                {paso === 3 &amp;&amp; (&#10;                    &lt;div className=&quot;relative h-[800px] overflow-hidden&quot;&gt;&#10;                        &lt;div className=&quot;overflow-y-auto h-full&quot;&gt;&#10;&#10;                            &lt;div className=&quot;text-gray-700 text-4xl font-bold mb-5 mt-5 overflow-hidden&quot;&gt;&#10;                            Detalles de la reserva&#10;                            &lt;/div&gt;&#10;                            &lt;form className=&quot;space-y-4&quot;&gt;&#10;                            {visitantes.map((vis, idx) =&gt; {&#10;                                // Es niño si no tiene correo ni celular&#10;                                const esNino = vis.tipo === &quot;nino&quot;;&#10;                                const nombreValido = validateNombre(vis.nombre);&#10;                                const apellidoValido = validateNombre(vis.apellido);&#10;                                const correoValido = validateCorreo(vis.correo, idx === 0); // solo obligatorio para el primer visitante&#10;                                const celularValido = validateCelular(vis.celular);&#10;                                const cumpleValido = validateCumple(vis.cumple);&#10;                                const ciudadValido = validateCiudad(vis.ciudad);&#10;                                const estadoValido = validateEstado(vis.estado);&#10;                                const paisValido = validatePais(vis.pais);&#10;&#10;                                return (&#10;                                &lt;div key={idx} className=&quot;p-4 flex flex-col gap-4 relative  rounded border&quot;&gt;&#10;                                     &lt;div className=&quot;flex flex-row gap-6&quot;&gt;&#10;                                    {/* Nombre */}&#10;                                    &lt;div className=&quot;flex flex-col flex-1&quot;&gt;&#10;                                   &lt;label className=&quot;block text-xs font-bold text-black mb-1&quot;&gt;&#10;                                    {`Visitante ${idx + 1} ${esNino ? &quot;(Niño)&quot; : idx === 0 ? &quot;(Tú)&quot; : &quot;&quot;}`}&#10;                                    &lt;/label&gt;&#10;                                    &lt;input&#10;                                        type=&quot;text&quot;&#10;                                        placeholder=&quot;Nombre/s&quot;&#10;                                        value={vis.nombre}&#10;                                        onChange={(e) =&gt; handleVis(idx, &quot;nombre&quot;, e.target.value)}&#10;                                         onBlur={() =&gt; handleBlur(idx, &quot;nombre&quot;)}&#10;                                        className={`border p-2 rounded w-full transition-colors duration-150 h-13 ${ touched[idx]?.nombre &amp;&amp; !nombreValido ? &quot;border-red-500&quot; : &quot;border-gray-300&quot;}`}&#10;                                        required&#10;                                    /&gt;&#10;                                    {touched[idx]?.nombre &amp;&amp; !nombreValido &amp;&amp; (&#10;                                        &lt;p className=&quot;text-red-600 text-sm mt-1&quot;&gt;El nombre es obligatorio.&lt;/p&gt;&#10;                                    )}&#10;                                    &lt;/div&gt;&#10;                                      {/* Apellido */}&#10;                                    &lt;div className=&quot;flex flex-col flex-1&quot;&gt;&#10;                                   &lt;label className=&quot;block text-xs font-bold text-black mb-1&quot;&gt;&#10;                                    Apellidos&#10;                                    &lt;/label&gt;&#10;                                    &lt;input&#10;                                        type=&quot;text&quot;&#10;                                        placeholder=&quot;Apellidos&quot;&#10;                                        value={vis.apellido}&#10;                                        onChange={(e) =&gt; handleVis(idx, &quot;apellido&quot;, e.target.value)}&#10;                                         onBlur={() =&gt; handleBlur(idx, &quot;apellido&quot;)}&#10;                                        className={`border p-2 rounded w-full transition-colors duration-150 h-13 ${ touched[idx]?.apellido &amp;&amp; !apellidoValido ? &quot;border-red-500&quot; : &quot;border-gray-300&quot;}`}&#10;                                        required&#10;                                    /&gt;&#10;                                    {touched[idx]?.apellido &amp;&amp; !apellidoValido &amp;&amp; (&#10;                                        &lt;p className=&quot;text-red-600 text-sm mt-1&quot;&gt;Este campo es obligatorio.&lt;/p&gt;&#10;                                    )}&#10;                                    &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                    {/* Solo adultos: correo y celular */}&#10;                                    {!esNino &amp;&amp; (&#10;                                    &lt;div className=&quot;flex flex-row gap-6&quot;&gt;&#10;                                        {/* Correo */}&#10;                                        &lt;div className=&quot;flex flex-col flex-1&quot;&gt;&#10;                                        &lt;label className=&quot;block text-xs font-bold text-black mb-1&quot;&gt;&#10;                                            Correo Electrónico &lt;span className=&quot;text-[10px]&quot;&gt;{idx === 0 ? &quot;(Principal)&quot; : &quot;(opcional)&quot;}&lt;/span&gt;&#10;                                        &lt;/label&gt;&#10;                                        &lt;input&#10;                                            type=&quot;email&quot;&#10;                                            placeholder=&quot;Correo electrónico&quot;&#10;                                            value={vis.correo}&#10;                                            onChange={(e) =&gt; handleVis(idx, &quot;correo&quot;, e.target.value)}&#10;                                            onBlur={() =&gt; handleBlur(idx, &quot;correo&quot;)}&#10;                                            className={`border p-2 rounded w-full transition-colors duration-150 h-13 ${&#10;                                            touched[idx]?.correo &amp;&amp; !correoValido ? &quot;border-red-500&quot; : &quot;border-gray-300&quot;&#10;                                            }`}&#10;                                        /&gt;&#10;                                        {touched[idx]?.correo &amp;&amp; !correoValido &amp;&amp; (&#10;                                            &lt;p className=&quot;text-red-600 text-sm mt-1&quot;&gt;Correo electrónico inválido.&lt;/p&gt;&#10;                                        )}&#10;                                        &lt;/div&gt;&#10;&#10;                                        {/* Celular */}&#10;                                        &lt;div className=&quot;flex flex-col flex-1&quot;&gt;&#10;                                        &lt;label className=&quot;block text-xs font-bold text-black mb-1&quot;&gt;&#10;                                            Celular WhatsApp&#10;                                        &lt;/label&gt;&#10;                                        &lt;input&#10;                                            type=&quot;tel&quot;&#10;                                            inputMode=&quot;numeric&quot;&#10;                                            pattern=&quot;\d{10,}&quot;&#10;                                            placeholder=&quot;Ej. 3312345678&quot;&#10;                                            value={vis.celular}&#10;                                            onChange={(e) =&gt; handleVis(idx, &quot;celular&quot;, e.target.value)}&#10;                                            onBlur={() =&gt; handleBlur(idx, &quot;celular&quot;)}&#10;                                            className={`border p-2 rounded w-full transition-colors duration-150 h-13 ${&#10;                                            touched[idx]?.celular &amp;&amp; !celularValido ? &quot;border-red-500&quot; : &quot;border-gray-300&quot;&#10;                                            }`}&#10;                                        /&gt;&#10;                                        {touched[idx]?.celular &amp;&amp; !celularValido &amp;&amp; (&#10;                                            &lt;p className=&quot;text-red-600 text-sm mt-1&quot;&gt;Debe tener al menos 10 dígitos.&lt;/p&gt;&#10;                                        )}&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                    )}&#10;                                    {/* Cumpleaños */}&#10;                                    &lt;div className=&quot;flex flex-col flex-1&quot;&gt;&#10;                                    &lt;label className=&quot;block text-xs font-bold text-black mb-1&quot;&gt;&#10;                                        Fecha de nacimiento&#10;                                    &lt;/label&gt;&#10;                                    &lt;input&#10;                                        type=&quot;date&quot;&#10;                                        value={vis.cumple}&#10;                                        onChange={(e) =&gt; handleVis(idx, &quot;cumple&quot;, e.target.value)}&#10;                                        onBlur={() =&gt; handleBlur(idx, &quot;cumple&quot;)}&#10;                                        className={`border p-2 rounded w-full transition-colors duration-150 h-13 ${&#10;                                        touched[idx]?.cumple &amp;&amp; !cumpleValido ? &quot;border-red-500&quot; : &quot;border-gray-300&quot;&#10;                                        }`}&#10;                                    /&gt;&#10;                                    {touched[idx]?.cumple &amp;&amp; !cumpleValido &amp;&amp; (&#10;                                        &lt;p className=&quot;text-red-600 text-sm mt-1&quot;&gt;Selecciona una fecha válida.&lt;/p&gt;&#10;                                    )}&#10;                                    &lt;/div&gt;&#10;&#10;                                    {/* Solo visitante 1: ciudad, estado, país */}&#10;                                    {idx === 0 &amp;&amp; !esNino &amp;&amp; (&#10;                                    &lt;&gt;&#10;                                        &lt;div className=&quot;flex flex-row gap-6&quot;&gt;&#10;                                            {/* Ciudad */}&#10;                                            &lt;div className=&quot;flex flex-col flex-1&quot;&gt;&#10;                                            &lt;label className=&quot;block text-xs font-bold text-black mb-1&quot;&gt;Ciudad&lt;/label&gt;&#10;                                            &lt;select&#10;                                                value={vis.ciudad}&#10;                                                onChange={(e) =&gt; handleCiudadChange(idx, e.target.value)}&#10;                                                onBlur={() =&gt; handleBlur(idx, &quot;ciudad&quot;)}&#10;                                                className={`border p-2 rounded w-full transition-colors duration-150 h-13 text-black ${&#10;                                                touched[idx]?.ciudad &amp;&amp; !ciudadValido ? &quot;border-red-500&quot; : &quot;border-gray-300&quot;&#10;                                                }`}&#10;                                                disabled={!vis.estado}&#10;                                            &gt;&#10;                                                &lt;option value=&quot;&quot;&gt;Selecciona ciudad&lt;/option&gt;&#10;                                                {(ciudades ?? []).map((ciudad) =&gt; (&#10;                                                &lt;option key={ciudad} value={ciudad}&gt;&#10;                                                    {ciudad}&#10;                                                &lt;/option&gt;&#10;                                                ))}&#10;                                            &lt;/select&gt;&#10;                                            {touched[idx]?.ciudad &amp;&amp; !ciudadValido &amp;&amp; (&#10;                                                &lt;p className=&quot;text-red-600 text-sm mt-1&quot;&gt;La ciudad es obligatoria.&lt;/p&gt;&#10;                                            )}&#10;                                            &lt;/div&gt;&#10;&#10;                                            {/* Estado */}&#10;                                            &lt;div className=&quot;flex flex-col flex-1&quot;&gt;&#10;                                            &lt;label className=&quot;block text-xs font-bold text-black mb-1&quot;&gt;Estado&lt;/label&gt;&#10;                                            &lt;select&#10;                                                value={vis.estado}&#10;                                                onChange={(e) =&gt; handleEstadoChange(idx, e.target.value)}&#10;                                                onBlur={() =&gt; handleBlur(idx, &quot;estado&quot;)}&#10;                                                className={`border p-2 rounded w-full transition-colors duration-150 h-13 text-black ${&#10;                                                touched[idx]?.estado &amp;&amp; !estadoValido ? &quot;border-red-500&quot; : &quot;border-gray-300&quot;&#10;                                                }`}&#10;                                                disabled={!vis.pais}&#10;                                            &gt;&#10;                                                &lt;option value=&quot;&quot;&gt;Selecciona estado&lt;/option&gt;&#10;                                                {(estados ?? []).map((estado) =&gt; (&#10;                                                &lt;option key={estado} value={estado}&gt;&#10;                                                    {estado}&#10;                                                &lt;/option&gt;&#10;                                                ))}&#10;                                            &lt;/select&gt;&#10;                                            {touched[idx]?.estado &amp;&amp; !estadoValido &amp;&amp; (&#10;                                                &lt;p className=&quot;text-red-600 text-sm mt-1&quot;&gt;El estado es obligatorio.&lt;/p&gt;&#10;                                            )}&#10;                                            &lt;/div&gt;&#10;&#10;                                                {/* País */}&#10;                                            &lt;div className=&quot;flex flex-col flex-1&quot;&gt;&#10;                                            &lt;label className=&quot;block text-xs font-bold text-black mb-1&quot;&gt;País&lt;/label&gt;&#10;                                            &lt;select&#10;                                                value={vis.pais}&#10;                                                onChange={(e) =&gt; handlePaisChange(idx, e.target.value)}&#10;                                                onBlur={() =&gt; handleBlur(idx, &quot;pais&quot;)}&#10;                                                className={`border p-2 rounded w-full transition-colors duration-150 h-13 text-black ${&#10;                                                touched[idx]?.pais &amp;&amp; !paisValido ? &quot;border-red-500&quot; : &quot;border-gray-300&quot;&#10;                                                }`}&#10;                                            &gt;&#10;                                                &lt;option value=&quot;&quot;&gt;Selecciona país&lt;/option&gt;&#10;                                                {(paises ?? []).map((pais) =&gt; (&#10;                                                &lt;option key={pais} value={pais}&gt;&#10;                                                    {pais}&#10;                                                &lt;/option&gt;&#10;                                                ))}&#10;                                            &lt;/select&gt;&#10;                                            {touched[idx]?.pais &amp;&amp; !paisValido &amp;&amp; (&#10;                                                &lt;p className=&quot;text-red-600 text-sm mt-1&quot;&gt;El país es obligatorio.&lt;/p&gt;&#10;                                            )}&#10;                                            &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                     {/* INE Frente */}&#10;                                        &lt;div className=&quot;flex flex-row items-start gap-4 mt-4&quot;&gt;&#10;                                        &lt;div className=&quot;flex flex-col flex-1&quot;&gt;&#10;                                            &lt;label className=&quot;block text-xs font-bold text-black mb-1&quot;&gt;&#10;                                            INE Frente (Imagen o PDF)&#10;                                            &lt;/label&gt;&#10;                                            &lt;input&#10;                                            type=&quot;file&quot;&#10;                                            accept=&quot;image/*,.pdf&quot;&#10;                                            onChange={e =&gt;&#10;                                                handleIneFileChange(idx, 'frente', e.target.files ? e.target.files[0] : null)&#10;                                            }&#10;                                            className=&quot;border p-1 rounded text-xs h-10&quot;&#10;                                            /&gt;&#10;                                            {ineFiles[idx]?.frente &amp;&amp; (&#10;                                            &lt;span className=&quot;text-xs text-green-600 mt-1&quot;&gt;&#10;                                                Archivo listo: {ineFiles[idx].frente.name}&#10;                                            &lt;/span&gt;&#10;                                            )}&#10;                                        &lt;/div&gt;&#10;&#10;                                        {/* Visualizador a la derecha */}&#10;                                        &lt;div&gt;&#10;                                            {ineFiles[idx]?.frente?.type?.startsWith(&quot;image/&quot;) &amp;&amp; (&#10;                                            &lt;img&#10;                                                src={URL.createObjectURL(ineFiles[idx].frente)}&#10;                                                alt=&quot;Previsualización INE Frente&quot;&#10;                                                className=&quot;max-w-[350px] rounded border&quot;&#10;                                            /&gt;&#10;                                            )}&#10;&#10;                                            {ineFiles[idx]?.frente?.type === &quot;application/pdf&quot; &amp;&amp; (&#10;                                            &lt;a&#10;                                                href={URL.createObjectURL(ineFiles[idx].frente)}&#10;                                                target=&quot;_blank&quot;&#10;                                                rel=&quot;noopener noreferrer&quot;&#10;                                                className=&quot;text-blue-600 text-xs underline&quot;&#10;                                            &gt;&#10;                                                Ver PDF INE Frente&#10;                                            &lt;/a&gt;&#10;                                            )}&#10;                                        &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;&#10;                                        {/* INE Reverso */}&#10;                                        &lt;div className=&quot;flex flex-row items-start gap-4 mt-4&quot;&gt;&#10;                                        &lt;div className=&quot;flex flex-col flex-1&quot;&gt;&#10;                                            &lt;label className=&quot;block text-xs font-bold text-black mb-1&quot;&gt;&#10;                                            INE Reverso (Imagen o PDF)&#10;                                            &lt;/label&gt;&#10;                                            &lt;input&#10;                                            type=&quot;file&quot;&#10;                                            accept=&quot;image/*,.pdf&quot;&#10;                                            onChange={e =&gt;&#10;                                                handleIneFileChange(idx, 'reverso', e.target.files ? e.target.files[0] : null)&#10;                                            }&#10;                                            className=&quot;border p-1 rounded text-xs h-10&quot;&#10;                                            /&gt;&#10;                                            {ineFiles[idx]?.reverso &amp;&amp; (&#10;                                            &lt;span className=&quot;text-xs text-green-600 mt-1&quot;&gt;&#10;                                                Archivo listo: {ineFiles[idx].reverso.name}&#10;                                            &lt;/span&gt;&#10;                                            )}&#10;                                        &lt;/div&gt;&#10;&#10;                                        {/* Visualizador a la derecha */}&#10;                                        &lt;div&gt;&#10;                                            {ineFiles[idx]?.reverso?.type?.startsWith(&quot;image/&quot;) &amp;&amp; (&#10;                                            &lt;img&#10;                                                src={URL.createObjectURL(ineFiles[idx].reverso)}&#10;                                                alt=&quot;Previsualización INE Reverso&quot;&#10;                                                className=&quot;max-w-[350px] rounded border&quot;&#10;                                            /&gt;&#10;                                            )}&#10;&#10;                                            {ineFiles[idx]?.reverso?.type === &quot;application/pdf&quot; &amp;&amp; (&#10;                                            &lt;a&#10;                                                href={URL.createObjectURL(ineFiles[idx].reverso)}&#10;                                                target=&quot;_blank&quot;&#10;                                                rel=&quot;noopener noreferrer&quot;&#10;                                                className=&quot;text-blue-600 text-xs underline&quot;&#10;                                            &gt;&#10;                                                Ver PDF INE Reverso&#10;                                            &lt;/a&gt;&#10;                                            )}&#10;                                        &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/&gt;&#10;                                    )}&#10;                                &lt;/div&gt;&#10;                                );&#10;                            })}&#10;                            &lt;/form&gt;&#10;&#10;                              {/* Resumen solo en mobile */}&#10;                            &lt;div className=&quot;md:hidden mt-8 p-6 bg-white rounded shadow&quot;&gt;&#10;                                &lt;h4 className=&quot;font-bold text-black mb-3&quot;&gt;Resumen de tu reserva&lt;/h4&gt;&#10;                                &lt;div className=&quot;flex items-center gap-2 text-sm mb-2&quot;&gt;&#10;                                    &lt;span&gt;&lt;/span&gt;&#10;                                    &lt;span className=&quot;capitalize&quot;&gt;{fechaDisplay}&lt;/span&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div className=&quot;flex items-center gap-2 text-sm mb-2&quot;&gt;&#10;                                    &lt;span&gt;⏰&lt;/span&gt;&#10;                                    &lt;span&gt;{selectedTime}&lt;/span&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div className=&quot;text-sm text-gray-500 mb-4&quot;&gt;&#10;                                    Disponibilidad confirmada para {visitantes.length} pase{visitantes.length &gt; 1 ? &quot;s&quot; : &quot;&quot;}&lt;br /&gt;&#10;&#10;                                &lt;/div&gt;&#10;                                {cortesias &gt; 0 &amp;&amp; (&#10;                                &lt;div className=&quot;text-sm text-gray-500 mb-4&quot;&gt;&#10;                                    &#10;                                    {cortesias} Cortesía{cortesias &gt; 1 ? &quot;s&quot; : &quot;&quot;} agregada{cortesias &gt; 1 ? &quot;s&quot; : &quot;&quot;} gratis&#10;                                    &#10;                                &lt;/div&gt;&#10;                                )}&#10;                                &lt;div className=&quot;flex flex-col gap-1 text-sm mb-2&quot;&gt;&#10;                                    &lt;div className=&quot;flex justify-between text-sm&quot;&gt;&#10;                                        &lt;span&gt;Precio Adultos 14+&lt;/span&gt;&#10;                                        &lt;span&gt;${precioAdulto} MXN&lt;/span&gt;&#10;                                    &lt;/div&gt;&#10;                                    {cantidadAdultos60 &gt; 0 &amp;&amp; (&#10;                                    &lt;div className=&quot;flex justify-between text-sm&quot;&gt;&#10;                                        &lt;span&gt;Precio Adultos 60+&lt;/span&gt;&#10;                                        &lt;span&gt;${precioAdulto60} MXN&lt;/span&gt;&#10;                                    &lt;/div&gt;&#10;                                    )}&#10;                                    {cantidadNinos &gt; 0 &amp;&amp; (&#10;                                    &lt;div className=&quot;flex justify-between text-sm&quot;&gt;&#10;                                        &lt;span&gt;PrecioNiños 2-13&lt;/span&gt;&#10;                                        &lt;span&gt;$70 MXN&lt;/span&gt;&#10;                                    &lt;/div&gt;&#10;                                    )}&#10;                                &lt;/div&gt;&#10;                                 &lt;div className=&quot;flex justify-between text-sm mb-2&quot;&gt;&#10;                                &lt;span&gt;Plataforma (5%)&lt;/span&gt;&#10;                                &lt;span&gt;${montoPlataforma.toFixed(2)} MXN&lt;/span&gt;&#10;                            &lt;/div&gt; &lt;div className=&quot;flex justify-between text-sm mb-2&quot;&gt;&#10;                                &lt;span&gt;Terminal e impuestos (5%)&lt;/span&gt;&#10;                                &lt;span&gt;${montoTerminal .toFixed(2)} MXN&lt;/span&gt;&#10;                            &lt;/div&gt; &#10;                            &#10;                                {promoAplicado &amp;&amp; (&#10;                                    &lt;div className=&quot;flex justify-between text-sm text-green-700 font-bold&quot;&gt;&#10;                                    &lt;span&gt;Descuento aplicado&lt;/span&gt;&#10;                                    &lt;span&gt;-${DESCUENTO_PROMO} MXN&lt;/span&gt;&#10;                                    &lt;/div&gt;&#10;                                )}&#10;                                &lt;div className=&quot;flex justify-between text-sm&quot;&gt;&#10;                                &lt;span&gt;Subtotal&lt;/span&gt;&#10;                                &lt;span&gt;${subtotalConDescuento} MXN&lt;/span&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;div className=&quot;flex justify-between font-bold text-base&quot;&gt;&#10;                                &lt;span&gt;Total&lt;/span&gt;&#10;                                &lt;span&gt;${totalConCargos.toFixed(2)} MXN&lt;/span&gt;&#10;                            &lt;/div&gt;&#10;                                {/* Código promocional */}&#10;                                &lt;input&#10;                                    className=&quot;mt-4 w-full border rounded px-2 py-1 text-sm&quot;&#10;                                    placeholder=&quot;Código promocional&quot;&#10;                                    value={codigoPromo}&#10;                                    onChange={e =&gt; setCodigoPromo(e.target.value)}&#10;                                    disabled={promoAplicado}&#10;                                /&gt;&#10;                                &lt;button&#10;                                    type=&quot;button&quot;&#10;                                    className=&quot;mt-2 w-full text-xs font-semibold text-black py-2 border border-gray-300 rounded hover:bg-gray-100&quot;&#10;                                    onClick={aplicarPromo}&#10;                                    disabled={promoAplicado}&#10;                                &gt;&#10;                                    Aplicar&#10;                                &lt;/button&gt;&#10;                                {msgPromo &amp;&amp; (&#10;                                    &lt;div className={`text-xs mt-2 ${promoAplicado ? &quot;text-green-700&quot; : &quot;text-red-600&quot;}`}&gt;&#10;                                    {msgPromo}&#10;                                    &lt;/div&gt;&#10;                                )}&#10;                                 &lt;h4 className=&quot;font-bold mb-3 mt-8&quot;&gt;Resumen de reserva&lt;/h4&gt;&#10;                            {/* Total visible siempre */}&#10;                            &lt;div className=&quot;flex justify-between font-bold text-lg mb-4&quot;&gt;&#10;                                &lt;span&gt;Total:&lt;/span&gt;&#10;                                &lt;span&gt;${totalConCargos.toFixed(2)} MXN&lt;/span&gt;&#10;                            &lt;/div&gt;&#10;                             {/* NUEVO: Método de pago */}&#10;                            &lt;div className=&quot;flex gap-3 mb-4&quot;&gt;&#10;                                &lt;label className=&quot;flex items-center cursor-pointer&quot;&gt;&#10;                                    &lt;input&#10;                                        type=&quot;radio&quot;&#10;                                        className=&quot;mr-2&quot;&#10;                                        name=&quot;metodoPago&quot;&#10;                                        value=&quot;efectivo&quot;&#10;                                        checked={metodoPago === &quot;efectivo&quot;}&#10;                                        onChange={() =&gt; {&#10;                                            setMetodoPago(&quot;efectivo&quot;);&#10;                                            setPaid(true); // Efectivo se considera &quot;pagado&quot;&#10;                                        }}&#10;                                    /&gt;&#10;                                    &lt;span&gt;Efectivo&lt;/span&gt;&#10;                                &lt;/label&gt;&#10;&#10;                            &lt;/div&gt;&#10;                               {paid &amp;&amp; metodoPago === &quot;efectivo&quot; &amp;&amp; (&#10;                                &lt;div className=&quot;mt-4 text-yellow-700 text-center font-bold&quot;&gt;&#10;                                    Presenta este resumen y paga en taquilla.&#10;                                &lt;/div&gt;&#10;                            )}&#10;&#10;&#10;                                {/* Botón finalizar para pago en efectivo */}&#10;                                &lt;button&#10;                                    className={`mt-6 w-full py-2 rounded font-bold text-white ${&#10;                                    (metodoPago === &quot;efectivo&quot; ? puedeFinalizarEfectivo : paid)&#10;                                        ? &quot;bg-[#18668b] hover:bg-[#14526d]&quot;&#10;                                        : &quot;bg-gray-300 cursor-not-allowed&quot;&#10;                                    }`}&#10;                                    onClick={() =&gt; {&#10;                                        handleContinuar();&#10;                                    }}&#10;                                    disabled={metodoPago === &quot;efectivo&quot; ? !puedeFinalizarEfectivo : !paid}&#10;                                &gt;&#10;                                    {metodoPago === &quot;efectivo&quot;&#10;                                    ? &quot;Finalizar y ver resumen para pago en efectivo&quot;&#10;                                    : &quot;Continuar al resumen&quot;}&#10;                                &lt;/button&gt;&#10;                                &lt;div className=&quot;mt-4 text-xs text-gray-500&quot;&gt;&#10;                                    Los pases son válidos para la fecha y hora seleccionada.&lt;br /&gt;&#10;                                    Pago 100% seguro. Puedes cancelar hasta 48 horas antes de tu visita.&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                          &lt;button&#10;                                className=&quot;mt-20 w-full py-7 rounded font-bold text-[#18668b] bg-white hover:bg-[#d6d3d3] border border-[#18668b]&quot;&#10;                                onClick={() =&gt; setPaso(1)}&#10;                            &gt;&#10;                                Volver a datos de huéspedes&#10;                            &lt;/button&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                    )}&#10;            &lt;/section&gt;&#10;             {/* Columna imagen */}&#10;            &lt;aside className=&quot;hidden md:flex w-1/2 h-full items-center justify-center bg-[#f8fafc]&quot;&gt;&#10;                &lt;div className=&quot;relative w-full h-full flex items-center justify-center&quot;&gt;&#10;                &lt;img&#10;                    src={imagenes[paso - 1]}&#10;                    alt={pasos[paso - 1].label}&#10;                    className=&quot;object-cover w-full h-[945px]  shadow&quot;&#10;                /&gt;&#10;&#10;                &lt;/div&gt;&#10;                {paso === 3 &amp;&amp; (&#10;                    &lt;&gt;&#10;                        &lt;div className=&quot;  p-6 mb-6&quot;&gt;&#10;                            &lt;h4 className=&quot;font-bold text-black mb-3&quot;&gt;Resumen de tu reserva&lt;/h4&gt;&#10;                            &lt;div className=&quot;flex items-center gap-2 text-sm mb-2&quot;&gt;&#10;                                &lt;span&gt;&lt;/span&gt;&#10;                                &lt;span className=&quot;capitalize&quot;&gt;{fechaDisplay}&lt;/span&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;div className=&quot;flex items-center gap-2 text-sm mb-2&quot;&gt;&#10;                                &lt;span&gt;⏰&lt;/span&gt;&#10;                                &lt;span&gt;{selectedTime}&lt;/span&gt;&#10;                            &lt;/div&gt;&#10;                          &lt;div className=&quot;text-sm text-gray-500 mb-4&quot;&gt;&#10;                            Disponibilidad confirmada para {visitantes.length} pase{visitantes.length &gt; 1 ? &quot;s&quot; : &quot;&quot;}&lt;br /&gt;&#10;&#10;                        &lt;/div&gt;&#10;                        {cortesias &gt; 0 &amp;&amp; (&#10;                          &lt;div className=&quot;text-sm text-gray-500 mb-4&quot;&gt;&#10;&#10;                             {cortesias} Cortesía{cortesias &gt; 1 ? &quot;s&quot; : &quot;&quot;} agregada{cortesias &gt; 1 ? &quot;s&quot; : &quot;&quot;} gratis&#10;&#10;                        &lt;/div&gt;&#10;                        )}&#10;                            &lt;div className=&quot;flex justify-between mb-1 text-sm&quot;&gt;&#10;                                &lt;span className=&quot;text-black&quot;&gt;Pases de Acceso General&lt;/span&gt;&#10;                                &lt;span className=&quot;text-black&quot;&gt;{visitantes.length} pases&lt;/span&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;div className=&quot;flex justify-between text-sm&quot;&gt;&#10;                                &lt;span&gt;Precio Adultos 14+&lt;/span&gt;&#10;                                &lt;span&gt;${precioAdulto} MXN&lt;/span&gt;&#10;                            &lt;/div&gt;&#10;                            {cantidadAdultos60 &gt; 0 &amp;&amp; (&#10;                               &lt;div className=&quot;flex justify-between text-sm&quot;&gt;&#10;                                &lt;span&gt;Precio Adultos 60+&lt;/span&gt;&#10;                                &lt;span&gt;${precioAdulto60} MXN&lt;/span&gt;&#10;                            &lt;/div&gt;&#10;                            )}&#10;                             {cantidadNinos &gt; 0 &amp;&amp; (&#10;                              &lt;div className=&quot;flex justify-between text-sm&quot;&gt;&#10;                                &lt;span&gt;PrecioNiños 2-13&lt;/span&gt;&#10;                                &lt;span&gt;$70 MXN&lt;/span&gt;&#10;                            &lt;/div&gt;&#10;                            )}&#10;&#10;                             &lt;div className=&quot;flex justify-between text-sm&quot;&gt;&#10;                                &lt;span&gt;Plataforma (5%)&lt;/span&gt;&#10;                                &lt;span&gt;${montoPlataforma.toFixed(2)} MXN&lt;/span&gt;&#10;                            &lt;/div&gt; &lt;div className=&quot;flex justify-between text-sm&quot;&gt;&#10;                                &lt;span&gt;Terminal e impuestos (5%)&lt;/span&gt;&#10;                                &lt;span&gt;${montoTerminal .toFixed(2)} MXN&lt;/span&gt;&#10;                            &lt;/div&gt; &#10;                            &#10;                            {promoAplicado &amp;&amp; (&#10;                                &lt;div className=&quot;flex justify-between text-sm text-green-700 font-bold&quot;&gt;&#10;                                    &lt;span&gt;Descuento aplicado&lt;/span&gt;&#10;                                    &lt;span&gt;-${DESCUENTO_PROMO} MXN&lt;/span&gt;&#10;                                &lt;/div&gt;&#10;                            )}&#10;                             &lt;div className=&quot;flex justify-between text-sm&quot;&gt;&#10;                                &lt;span&gt;Subtotal&lt;/span&gt;&#10;                                &lt;span&gt;${subtotalConDescuento} MXN&lt;/span&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;div className=&quot;flex justify-between font-bold text-base&quot;&gt;&#10;                                &lt;span&gt;Total&lt;/span&gt;&#10;                                &lt;span&gt;${totalConCargos.toFixed(2)} MXN&lt;/span&gt;&#10;                            &lt;/div&gt;&#10;&#10;&#10;                            {/* Código promocional */}&#10;                            &lt;input&#10;                                className=&quot;mt-4 w-full border rounded px-2 py-1 text-sm&quot;&#10;                                placeholder=&quot;Código promocional&quot;&#10;                                value={codigoPromo}&#10;                                onChange={e =&gt; setCodigoPromo(e.target.value)}&#10;                                disabled={promoAplicado}&#10;                            /&gt;&#10;                            &lt;button&#10;                                type=&quot;button&quot;&#10;                                className=&quot;mt-2 w-full text-xs font-semibold text-black py-2 border border-gray-300 rounded hover:bg-gray-100&quot;&#10;                                onClick={aplicarPromo}&#10;                                disabled={promoAplicado}&#10;                            &gt;&#10;                                Aplicar&#10;                            &lt;/button&gt;&#10;                            {msgPromo &amp;&amp; (&#10;                                &lt;div className={`text-xs mt-2 ${promoAplicado ? &quot;text-green-700&quot; : &quot;text-red-600&quot;}`}&gt;&#10;                                    {msgPromo}&#10;                                &lt;/div&gt;&#10;                            )}&#10;&#10;                            &lt;h4 className=&quot;font-bold mb-3 mt-8&quot;&gt;Resumen de reserva&lt;/h4&gt;&#10;                            {/* Total visible siempre */}&#10;                            &lt;div className=&quot;flex justify-between font-bold text-lg mb-4&quot;&gt;&#10;                                &lt;span&gt;Total:&lt;/span&gt;&#10;                                &lt;span&gt;${totalConCargos.toFixed(2)} MXN&lt;/span&gt;&#10;                            &lt;/div&gt;&#10;&#10;                            {/* NUEVO: Método de pago */}&#10;                            &lt;div className=&quot;flex gap-3 mb-4&quot;&gt;&#10;                                &lt;label className=&quot;flex items-center cursor-pointer&quot;&gt;&#10;                                    &lt;input&#10;                                        type=&quot;radio&quot;&#10;                                        className=&quot;mr-2&quot;&#10;                                        name=&quot;metodoPago&quot;&#10;                                        value=&quot;efectivo&quot;&#10;                                        checked={metodoPago === &quot;efectivo&quot;}&#10;                                        onChange={() =&gt; {&#10;                                            setMetodoPago(&quot;efectivo&quot;);&#10;                                            setPaid(true); // Efectivo se considera &quot;pagado&quot;&#10;                                        }}&#10;                                    /&gt;&#10;                                    &lt;span&gt;Efectivo&lt;/span&gt;&#10;                                &lt;/label&gt;&#10;&#10;                            &lt;/div&gt;&#10;&#10;&#10;                            {paid &amp;&amp; metodoPago === &quot;efectivo&quot; &amp;&amp; (&#10;                                &lt;div className=&quot;mt-4 text-yellow-700 text-center font-bold&quot;&gt;&#10;                                    Presenta este resumen y paga en taquilla.&#10;                                &lt;/div&gt;&#10;                            )}&#10;&#10;                            &lt;button&#10;                              className={`mt-6 w-full py-2 rounded font-bold text-white ${&#10;                                (metodoPago === &quot;efectivo&quot; ? puedeFinalizarEfectivo : paid)&#10;                                  ? &quot;bg-[#18668b] hover:bg-[#14526d]&quot;&#10;                                  : &quot;bg-gray-300 cursor-not-allowed&quot;&#10;                              }`}&#10;                               onClick={() =&gt; {&#10;                                        handleContinuar();&#10;                                    }}&#10;                              disabled={metodoPago === &quot;efectivo&quot; ? !puedeFinalizarEfectivo : !paid}&#10;                            &gt;&#10;                              {metodoPago === &quot;efectivo&quot;&#10;                                ? &quot;Finalizar y ver resumen para pago en efectivo&quot;&#10;                                : &quot;Continuar al resumen&quot;}&#10;                            &lt;/button&gt;&#10;&#10;                            &lt;div className=&quot;mt-4 text-xs text-gray-500&quot;&gt;&#10;                                Los pases son válidos para la fecha y hora seleccionada.&lt;br /&gt;&#10;                                Pago 100% seguro. Puedes cancelar hasta 48 horas antes de tu visita.&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/&gt;&#10;                    )}&#10;&#10;&#10;            &lt;/aside&gt;&#10;            &lt;/main&gt;&#10;            {/* &lt;Footer /&gt; */}&#10;          &lt;/div&gt;&#10;    );&#10;}&#10;&#10;" />
              <option name="updatedContent" value="// Tipo explícito para archivos INE&#10;&quot;use client&quot;;&#10;&#10;type IneFiles = { frente: File | null, reverso: File | null };&#10;import { JSXElementConstructor, ReactElement, ReactNode, ReactPortal, useState, useEffect } from &quot;react&quot;;&#10;import Header from &quot;@/components/Header&quot;;&#10;import Footer from &quot;@/components/Footer&quot;;&#10;import toast, {Toaster} from &quot;react-hot-toast&quot;;&#10;import {FiPlus, FiTrash2} from &quot;react-icons/fi&quot;;&#10;import Stepper from &quot;@/components/Stepper&quot;;&#10;import axios from &quot;axios&quot;;&#10;import { Country, State, City } from &quot;country-state-city&quot;;&#10;&#10;const CODIGO_PROMO = &quot;PROMO100&quot;;&#10;const DESCUENTO_PROMO = 100;&#10;const PRECIO_PASE = 350;&#10;&#10;&#10;// function getPrecioPase(fecha: string, categoria: string = &quot;general&quot;) {&#10;//     // Obtén el día de la semana: 0=Domingo, 1=Lunes, ..., 6=Sábado&#10;//     const diaSemana = new Date(fecha).getDay();&#10;//     // Lunes a Jueves: 1-4, Viernes a Niños menores de 13 años entran gratis.Domingo: 0, 5, 6&#10;//     if ([1, 2, 3, 4].includes(diaSemana)) {&#10;//         // Lunes a Jueves&#10;//         switch (categoria) {&#10;//             case &quot;general&quot;: return 350;&#10;//             case &quot;grupos&quot;: return 325;&#10;//             case &quot;inapam&quot;: return 300;&#10;//             case &quot;convenios&quot;: return 300;&#10;//             case &quot;locales&quot;: return 250;&#10;//             case &quot;discapacidad&quot;: return 250;&#10;//             default: return 350;&#10;//         }&#10;//     } else {&#10;//         // Viernes a Domingo&#10;//         switch (categoria) {&#10;//             case &quot;general&quot;: return 420;&#10;//             case &quot;grupos&quot;: return 390;&#10;//             case &quot;inapam&quot;: return 360;&#10;//             case &quot;convenios&quot;: return 360;&#10;//             case &quot;locales&quot;: return 300;&#10;//             case &quot;discapacidad&quot;: return 300;&#10;//             default: return 420;&#10;//         }&#10;//     }&#10;// }&#10;&#10;const regexEmail = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;&#10;&#10;const diasSemana = [&quot;Lun&quot;, &quot;Mar&quot;, &quot;Mié&quot;, &quot;Jue&quot;, &quot;Vie&quot;, &quot;Sáb&quot;, &quot;Dom&quot;];&#10;const horarios = [&#10;    &quot;10:00 AM&quot;, &quot;01:00 PM&quot;, &quot;04:00 PM&quot;&#10;];&#10;&#10;function getDiasMes(year: number, month: number) {&#10;    const firstDay = new Date(year, month, 1).getDay(); // 0=domingo&#10;    const lastDate = new Date(year, month + 1, 0).getDate();&#10;    const primerDia = firstDay === 0 ? 6 : firstDay - 1;&#10;    return {&#10;        dias: Array.from({length: lastDate}, (_, i) =&gt; i + 1),&#10;        primerDia,&#10;    };&#10;}&#10;&#10;function formatFechaEs(year: number, month: number, day: number) {&#10;    const fecha = new Date(`${year}-${(month + 1).toString().padStart(2, &quot;0&quot;)}-${day&#10;        .toString()&#10;        .padStart(2, &quot;0&quot;)}T12:00:00`);&#10;    return fecha.toLocaleDateString(&quot;es-MX&quot;, {&#10;        weekday: &quot;long&quot;,&#10;        day: &quot;2-digit&quot;,&#10;        month: &quot;long&quot;,&#10;        year: &quot;numeric&quot;,&#10;    });&#10;}&#10;&#10;export default function DaypassUnicaPage() {&#10;&#10;    const [paises, setPaises] = useState&lt;string[]&gt;([]);&#10;    const [estados, setEstados] = useState&lt;string[]&gt;([]);&#10;    const [ciudades, setCiudades] = useState&lt;string[]&gt;([]);&#10;&#10;useEffect(() =&gt; {&#10;  async function cargarPaises() {&#10;    try {&#10;      const res = await fetch(&quot;https://countriesnow.space/api/v0.1/countries/positions&quot;);&#10;      const data = await res.json();&#10;      const nombres = Array.isArray(data.data)&#10;        ? data.data.map((p: any) =&gt; p.name)&#10;        : [];&#10;      setPaises(nombres);&#10;    } catch (error) {&#10;      console.error(&quot;Error al cargar países:&quot;, error);&#10;    }&#10;  }&#10;&#10;  async function detectarUbicacionPorIP() {&#10;    try {&#10;      const res = await fetch(&quot;https://ipapi.co/json/&quot;);&#10;      const data = await res.json();&#10;&#10;      const pais = data.country_name;      // ej. &quot;Mexico&quot;&#10;      const estado = data.region;          // ej. &quot;Jalisco&quot;&#10;      const ciudad = data.city;            // ej. &quot;Zapopan&quot;&#10;&#10;      console.log(&quot;Detectado por IP:&quot;, pais, estado, ciudad);&#10;&#10;      // Cargamos estados y ciudades según país/estado detectados&#10;      await fetchEstadosDePais(pais);&#10;      await fetchCiudadesDeEstado(pais, estado);&#10;&#10;      // Asignamos la ubicación detectada al visitante 0&#10;      setVisitantes((prev) =&gt; {&#10;        const copia = [...prev];&#10;        copia[0].pais = pais;&#10;        copia[0].estado = estado;&#10;        copia[0].ciudad = ciudad;&#10;        return copia;&#10;      });&#10;    } catch (error) {&#10;      console.error(&quot;Error al detectar ubicación por IP:&quot;, error);&#10;    }&#10;  }&#10;&#10;  cargarPaises();&#10;  detectarUbicacionPorIP();&#10;}, []);&#10;&#10;const fetchEstadosDePais = async (paisNombre: string) =&gt; {&#10;  if (!paisNombre) return;&#10;&#10;  try {&#10;    const res = await fetch(&quot;https://countriesnow.space/api/v0.1/countries/states&quot;, {&#10;      method: &quot;POST&quot;,&#10;      headers: { &quot;Content-Type&quot;: &quot;application/json&quot; },&#10;      body: JSON.stringify({ country: paisNombre }),&#10;    });&#10;&#10;    const data = await res.json();&#10;&#10;    if (data.data &amp;&amp; Array.isArray(data.data.states)) {&#10;      const estados = data.data.states.map((s: any) =&gt; s.name);&#10;      setEstados(estados);&#10;    } else {&#10;      console.warn(&quot;No se encontraron estados para:&quot;, paisNombre);&#10;      setEstados([]);&#10;    }&#10;  } catch (error) {&#10;    console.error(&quot;Error al cargar estados:&quot;, error);&#10;    setEstados([]);&#10;  }&#10;};&#10;&#10;const fetchCiudadesDeEstado = async (paisNombre: string, estadoNombre: string) =&gt; {&#10;  if (!paisNombre || !estadoNombre) return;&#10;&#10;  try {&#10;    const res = await fetch(&quot;https://countriesnow.space/api/v0.1/countries/state/cities&quot;, {&#10;      method: &quot;POST&quot;,&#10;      headers: { &quot;Content-Type&quot;: &quot;application/json&quot; },&#10;      body: JSON.stringify({ country: paisNombre, state: estadoNombre }),&#10;    });&#10;&#10;    const data = await res.json();&#10;&#10;    if (Array.isArray(data.data)) {&#10;      setCiudades(data.data);&#10;    } else {&#10;      console.warn(`No se encontraron ciudades para ${estadoNombre}, ${paisNombre}`);&#10;      setCiudades([]);&#10;    }&#10;  } catch (error) {&#10;    console.error(&quot;Error al cargar ciudades:&quot;, error);&#10;    setCiudades([]);&#10;  }&#10;};&#10;&#10;const handlePaisChange = (idx: number, paisNombre: string) =&gt; {&#10;  setVisitantes((prev) =&gt; {&#10;    const copia = [...prev];&#10;    copia[idx].pais = paisNombre;&#10;    copia[idx].estado = &quot;&quot;;&#10;    copia[idx].ciudad = &quot;&quot;;&#10;    return copia;&#10;  });&#10;&#10;  fetchEstadosDePais(paisNombre);&#10;};&#10;&#10;const handleEstadoChange = (idx: number, estadoNombre: string) =&gt; {&#10;  setVisitantes((prev) =&gt; {&#10;    const copia = [...prev];&#10;    const paisActual = copia[idx].pais; // usamos la copia ya actualizada&#10;    copia[idx].estado = estadoNombre;&#10;    copia[idx].ciudad = &quot;&quot;;&#10;&#10;    fetchCiudadesDeEstado(paisActual, estadoNombre);&#10;&#10;    return copia;&#10;  });&#10;};&#10;const handleCiudadChange = (idx: number, ciudadNombre: string) =&gt; {&#10;  setVisitantes((prev) =&gt; {&#10;    const copia = [...prev];&#10;    copia[idx].ciudad = ciudadNombre;&#10;    return copia;&#10;  });&#10;};&#10;&#10;&#10;&#10;&#10;&#10;    useEffect(() =&gt; {&#10;        localStorage.clear();&#10;    }, []);&#10;    const [visitantes, setVisitantes] = useState([&#10;        {nombre: &quot;&quot;, apellido:&quot;&quot;, correo: &quot;&quot;, celular: &quot;&quot;, cumple: &quot;&quot;, ciudad: &quot;&quot;, estado:&quot;&quot;, pais:&quot;&quot;,tipo: &quot;general&quot;,},&#10;    ]);&#10;    const [touched, setTouched] = useState([&#10;          {&#10;    nombre: false,&#10;    apellido: false,&#10;    correo: false,&#10;    celular: false,&#10;    cumple: false,&#10;    ciudad: false,&#10;    estado: false,&#10;    pais: false,&#10;    ine: false,&#10;  },&#10;    ]);&#10;    // Estado para archivos INE por visitante&#10;    const [ineFiles, setIneFiles] = useState&lt;IneFiles[]&gt;(&#10;        visitantes.map(() =&gt; ({ frente: null, reverso: null }))&#10;    );&#10;    const [codigoPromo, setCodigoPromo] = useState(&quot;&quot;);&#10;    const [promoAplicado, setPromoAplicado] = useState(false);&#10;    const [msgPromo, setMsgPromo] = useState(&quot;&quot;);&#10;    const [descuento, setDescuento] = useState(0);&#10;&#10;    const today = new Date();&#10;    const [mes, setMes] = useState(today.getMonth());&#10;    const [year, setYear] = useState(today.getFullYear());&#10;    const [selectedDay, setSelectedDay] = useState(today.getDate());&#10;    const [selectedTime, setSelectedTime] = useState(&quot;&quot;); // Inicializar vacío para forzar selección&#10;    const [errores, setErrores] = useState(&#10;    visitantes.map(() =&gt; ({&#10;        nombre: &quot;&quot;,&#10;        apellido:&quot;&quot;,&#10;        correo: &quot;&quot;,&#10;        celular: &quot;&quot;,&#10;        cumple: &quot;&quot;,&#10;        ciudad: &quot;&quot;,&#10;        estado: &quot;&quot;,&#10;        pais: &quot;&quot;&#10;    }))&#10;    );&#10;&#10;&#10;    function validateNombre(nombre: string) {&#10;        return nombre.trim().length &gt; 0;&#10;    }&#10;     function validateApellido(apellido: string) {&#10;        return apellido.trim().length &gt; 0;&#10;    }&#10;&#10;    function validateCorreo(correo: string, obligatorio: boolean) {&#10;        if (!correo.trim() &amp;&amp; !obligatorio) return true;&#10;        return regexEmail.test(correo.trim());&#10;    }&#10;&#10;    function validateCelular(celular: string) {&#10;        return /^\d{10,}$/.test(celular.trim());&#10;    }&#10;    const validateCumple = (fecha: string) =&gt; fecha.trim() !== &quot;&quot;;&#10;    const validateCiudad = (ciudad: string) =&gt; ciudad.trim() !== &quot;&quot;;&#10;    const validateEstado = (estado: string) =&gt; estado.trim() !== &quot;&quot;;&#10;    const validatePais = (pais: string) =&gt; pais.trim() !== &quot;&quot;;&#10;    const validateIne = (ine: string) =&gt; ine.trim() !== &quot;&quot;;&#10;&#10;    // Función para verificar si un horario ya pasó cuando es el día de hoy&#10;    function isHorarioPasado(horario: string): boolean {&#10;        const fechaSeleccionada = new Date(year, mes, selectedDay);&#10;        const hoy = new Date();&#10;&#10;        // Si no es el día de hoy, el horario está disponible&#10;        if (fechaSeleccionada.toDateString() !== hoy.toDateString()) {&#10;            return false;&#10;        }&#10;&#10;        // Convertir el horario a formato 24 horas para comparar&#10;        const [tiempo, periodo] = horario.split(' ');&#10;        const [horas, minutos] = tiempo.split(':').map(Number);&#10;&#10;        let horaEn24 = horas;&#10;        if (periodo === 'PM' &amp;&amp; horas !== 12) {&#10;            horaEn24 += 12;&#10;        } else if (periodo === 'AM' &amp;&amp; horas === 12) {&#10;            horaEn24 = 0;&#10;        }&#10;&#10;        // Crear fecha con el horario seleccionado&#10;        const fechaHorario = new Date(year, mes, selectedDay, horaEn24, minutos);&#10;&#10;        // Comparar con la hora actual&#10;        return fechaHorario &lt;= hoy;&#10;    }&#10;&#10;    // Función para verificar si se puede continuar al paso 3&#10;    function puedeAvanzarPaso2(): boolean {&#10;        // Verificar que hay un día y horario seleccionado&#10;        if (!selectedDay || !selectedTime) {&#10;            return false;&#10;        }&#10;&#10;        // Verificar que el horario seleccionado no haya pasado&#10;        return !isHorarioPasado(selectedTime);&#10;    }&#10;&#10;    const puedeContinuar =&#10;        visitantes.every(&#10;            (v, i) =&gt;&#10;                validateNombre(v.nombre) &amp;&amp;&#10;                validateApellido(v.apellido) &amp;&amp;&#10;                validateCelular(v.celular) &amp;&amp;&#10;                validateCorreo(v.correo, i === 0)&#10;        ) &amp;&amp;&#10;        selectedDay &gt; 0 &amp;&amp;&#10;        selectedTime;&#10;type Visitante = {&#10;  nombre: string;&#10;  apellido: string;&#10;  correo: string;&#10;  celular: string;&#10;  cumple: string;&#10;  ciudad: string;&#10;  estado: string;&#10;  pais: string;&#10;  tipo: &quot;adulto&quot; | &quot;nino&quot;; // ← agrega esto&#10;};&#10;&#10;    // Agregar visitante&#10;    const handleAddVisitante = () =&gt; {&#10;        if (visitantes.length &gt;= 10) return;&#10;        setVisitantes((prev) =&gt; [&#10;            ...prev,&#10;            {nombre: &quot;&quot;, apellido:&quot;&quot;, correo: &quot;&quot;, celular: &quot;&quot;, cumple: &quot;&quot;, ciudad: &quot;&quot;, estado:&quot;&quot;, pais:&quot;&quot;,tipo: &quot;adulto&quot;, },&#10;        ]);&#10;        setTouched((prev) =&gt; [&#10;            ...prev,&#10;              {&#10;    nombre: false,&#10;    apellido: false,&#10;    correo: false,&#10;    celular: false,&#10;    cumple: false,&#10;    ciudad: false,&#10;    estado: false,&#10;    pais: false,&#10;    ine: false,&#10;  },&#10;        ]);&#10;        setIneFiles((prev) =&gt; [&#10;            ...prev,&#10;            { frente: null, reverso: null }&#10;        ]);&#10;    };&#10;&#10;    // Cambios por visitante&#10;    const handleVis = (idx: number, campo: 'nombre' |'apellido'| 'correo' | 'celular'| 'cumple'| 'ciudad' | 'estado'| 'pais', valor: string) =&gt; {&#10;        setVisitantes((prev) =&gt; {&#10;            const copia = [...prev];&#10;            copia[idx][campo] = valor;&#10;            return copia;&#10;        });&#10;    };&#10;&#10;  type Campo =&#10;  | 'nombre'&#10;  |'apellido'&#10;  | 'correo'&#10;  | 'celular'&#10;  | 'cumple'&#10;  | 'ciudad'&#10;  | 'estado'&#10;  | 'pais'&#10;  | 'ine';&#10;&#10;const handleBlur = (idx: number, campo: Campo) =&gt; {&#10;  setTouched((prev) =&gt; {&#10;    const copy = [...prev];&#10;    copy[idx][campo] = true;&#10;    return copy;&#10;  });&#10;};&#10;&#10;&#10;    const aplicarPromo = () =&gt; {&#10;        if (codigoPromo.trim().toUpperCase() === CODIGO_PROMO) {&#10;            setPromoAplicado(true);&#10;            setMsgPromo(`¡Descuento de $${DESCUENTO_PROMO} aplicado!`);&#10;            setDescuento(DESCUENTO_PROMO);&#10;            toast.success(`¡Descuento de $${DESCUENTO_PROMO} aplicado!`);&#10;            localStorage.setItem(&quot;promo_aplicada&quot;, &quot;1&quot;);&#10;            localStorage.setItem(&quot;descuentoPromo&quot;, DESCUENTO_PROMO.toString());&#10;            localStorage.setItem(&quot;promo_codigo&quot;, codigoPromo.trim().toUpperCase());&#10;        } else {&#10;            setPromoAplicado(false);&#10;            setMsgPromo(&quot;Código promocional no válido.&quot;);&#10;            setDescuento(0);&#10;            toast.error(&quot;Código promocional no válido.&quot;);&#10;            localStorage.removeItem(&quot;promo_aplicada&quot;);&#10;            localStorage.removeItem(&quot;descuentoPromo&quot;);&#10;            localStorage.removeItem(&quot;promo_codigo&quot;);&#10;        }&#10;    };&#10;&#10;    const {dias, primerDia} = getDiasMes(year, mes);&#10;    const fechaSeleccionada = `${year}-${(mes + 1).toString().padStart(2, &quot;0&quot;)}-${selectedDay.toString().padStart(2, &quot;0&quot;)}`;&#10;    const fechaDisplay = formatFechaEs(year, mes, selectedDay);&#10;&#10;    const [adultos, setAdultos] = useState(1);&#10;    const [ninos, setNinos] = useState(0);&#10;    const [adultos60, setAdultos60] = useState(0);&#10;&#10;    const cantidadAdultos = adultos;&#10;    const cantidadAdultos60 = adultos60;&#10;    const cantidadNinos = ninos;&#10;    const cantidadMenores2 = 0; // Si manejas menores de 2 años, ajusta aquí&#10;    const esGrupo = (cantidadAdultos + cantidadAdultos60) &gt;= 12;&#10;&#10;&#10;const precioAdulto = getPrecioPorTipo(fechaSeleccionada, &quot;adulto&quot;, esGrupo);&#10;const precioAdulto60 = getPrecioPorTipo(fechaSeleccionada, &quot;adulto60&quot;, esGrupo);&#10;const precioNino = getPrecioPorTipo(fechaSeleccionada, &quot;nino&quot;, esGrupo);&#10;const precioMenor2 = getPrecioPorTipo(fechaSeleccionada, &quot;menor2&quot;, esGrupo);&#10;&#10;&#10;&#10;const subtotalAdultos = cantidadAdultos * precioAdulto;&#10;const subtotalAdultos60 = cantidadAdultos60 * precioAdulto60;&#10;const subtotalNinos = cantidadNinos * precioNino;&#10;const subtotalMenores2 = cantidadMenores2 * precioMenor2;&#10;&#10;const subtotal = subtotalAdultos + subtotalAdultos60 + subtotalNinos + subtotalMenores2;&#10;const total = Math.max(subtotal - descuento, 0);&#10;// Porcentajes&#10;const porcentajePlataforma = 0.05;  // 5%&#10;const porcentajeTerminal = 0.05;    // 5% &#10;// const porcentajeIVA = 0.16;         // 16%&#10;&#10;// Descuento aplicado al subtotal&#10;const subtotalConDescuento = Math.max(subtotal - descuento, 0);&#10;&#10;// Montos adicionales&#10;const montoPlataforma = subtotalConDescuento * porcentajePlataforma;&#10;const montoTerminal = subtotalConDescuento * porcentajeTerminal;&#10;// const montoIVA = subtotalConDescuento * porcentajeIVA;&#10;&#10;// Total final&#10;const totalConCargos = subtotalConDescuento + montoPlataforma + montoTerminal;&#10;function calcularCortesias(totalAdultos: number): number {&#10;  if (totalAdultos &gt;= 60) return 4;&#10;  if (totalAdultos &gt;= 45) return 3;&#10;  if (totalAdultos &gt;= 30) return 2;&#10;  if (totalAdultos &gt;= 15) return 1;&#10;  return 0;&#10;}&#10;const totalAdultosUnicos = cantidadAdultos + cantidadAdultos60;&#10;const cortesias = calcularCortesias(totalAdultosUnicos);&#10;&#10;&#10;    // Prepara los datos del formulario para enviar por correo electrónico&#10;    function prepararDatosParaCorreo() {&#10;        const data = {&#10;            visitantes: visitantes.map((v, idx) =&gt; ({&#10;                nombre: v.nombre,&#10;                apellido: v.apellido,&#10;                correo: v.correo,&#10;                celular: v.celular,&#10;                ine_frente: idx === 0 &amp;&amp; ineFiles[idx]?.frente ? ineFiles[idx].frente.name : undefined,&#10;                ine_reverso: idx === 0 &amp;&amp; ineFiles[idx]?.reverso ? ineFiles[idx].reverso.name : undefined,&#10;            })),&#10;            fecha: fechaSeleccionada,&#10;            fechaDisplay: fechaDisplay,&#10;            horario: selectedTime,&#10;            cantidad: visitantes.length,&#10;            subtotal,&#10;            descuento,&#10;            total,&#10;            promoAplicado,&#10;            codigoPromo,&#10;            metodoPago,&#10;        };&#10;        return data;&#10;    }&#10;&#10;    // Genera el cuerpo del correo electrónico en texto plano&#10;    function generarCuerpoCorreo(data: ReturnType&lt;typeof prepararDatosParaCorreo&gt;) {&#10;        const visitantesTxt = data.visitantes.map((v, idx) =&gt;&#10;            `Visitante ${idx + 1}:\n- Nombre: ${v.nombre} \n- Apellido: ${v.apellido}\n- Correo: ${v.correo}\n- Celular: ${v.celular}\n`&#10;            + (idx === 0 ? `- INE Frente: ${v.ine_frente || &quot;No adjunto&quot;}\n- INE Reverso: ${v.ine_reverso || &quot;No adjunto&quot;}\n` : &quot;&quot;)&#10;        ).join('\n');&#10;&#10;        return `&#10;Reserva de DayPass&#10;&#10;Fecha de visita: ${data.fechaDisplay}&#10;Hora de llegada: ${data.horario}&#10;Cantidad de personas: ${data.cantidad}&#10;&#10;${visitantesTxt}&#10;&#10;Subtotal: $${data.subtotal} MXN&#10;${data.promoAplicado ? `Descuento aplicado: -$${data.descuento} MXN\n` : &quot;&quot;}&#10;Total a pagar: $${data.total} MXN&#10;&#10;Método de pago: ${data.metodoPago === &quot;tarjeta&quot; ? &quot;Tarjeta&quot; : &quot;Efectivo&quot;}&#10;${data.codigoPromo ? `Código promocional usado: ${data.codigoPromo}\n` : &quot;&quot;}&#10;&#10;¡Gracias por reservar!&#10;        `.trim();&#10;    }&#10;&#10;    // Guardar y continuar&#10;    const handleSiguiente = () =&gt; {&#10;        localStorage.setItem(&quot;visitantes&quot;, JSON.stringify(visitantes));&#10;        localStorage.setItem(&quot;cantidad&quot;, visitantes.length.toString());&#10;        localStorage.setItem(&quot;fechaVisita&quot;, fechaSeleccionada);&#10;        localStorage.setItem(&quot;horaVisita&quot;, selectedTime);&#10;        window.location.href = &quot;/daypass/extras&quot;;&#10;    };&#10;&#10;    // async function handleContinuar() {&#10;    //     const datos = prepararDatosParaCorreo();&#10;&#10;    //     // Armado exacto de FormData&#10;    //     const formData = new FormData();&#10;&#10;    //     // Visitor principal&#10;    //     const principal = datos.visitantes[0];&#10;    //     formData.append(&quot;visitor[name]&quot;, principal.nombre);&#10;    //     formData.append(&quot;visitor[lastname]&quot;, principal.apellido);&#10;    //     formData.append(&quot;visitor[email]&quot;, principal.correo);&#10;    //     formData.append(&quot;visitor[phone]&quot;, principal.celular);&#10;    //     formData.append(&quot;visitor[type]&quot;, &quot;general&quot;);&#10;&#10;    //     // INE archivos (si existen)&#10;    //     if (ineFiles[0]?.frente) formData.append(&quot;idcard_front&quot;, ineFiles[0].frente, ineFiles[0].frente.name);&#10;    //     if (ineFiles[0]?.reverso) formData.append(&quot;idcard_back&quot;, ineFiles[0].reverso, ineFiles[0].reverso.name);&#10;&#10;    //     // Fecha y hora combinada&#10;    //     const fechaHora = datos.fecha + &quot; &quot; + (datos.horario || &quot;11:00 AM&quot;);&#10;    //     formData.append(&quot;reservation_at&quot;, fechaHora);&#10;&#10;    //     // Totales&#10;    //     formData.append(&quot;totals[total]&quot;, String(datos.total));&#10;&#10;    //     // Promo como JSON vacío o valor real si existe&#10;    //     formData.append(&quot;promo&quot;, datos.promoAplicado ? JSON.stringify({ code: datos.codigoPromo }) : &quot;[]&quot;);&#10;&#10;    //     // Todos los visitantes&#10;    //     datos.visitantes.forEach((v, idx) =&gt; {&#10;    //         formData.append(`visitors[${idx}][name]`, v.nombre);&#10;    //         formData.append(`visitors[${idx}][lastname]`, v.apellido);&#10;    //         formData.append(`visitors[${idx}][email]`, v.correo);&#10;    //         formData.append(`visitors[${idx}][phone]`, v.celular);&#10;    //         formData.append(`visitors[${idx}][type]`, &quot;general&quot;);&#10;    //     });&#10;&#10;    //     try {&#10;    //         const response = await fetch(&quot;/api/reservations&quot;, {&#10;    //             method: &quot;POST&quot;,&#10;    //             body: formData,&#10;    //         });&#10;&#10;    //         if (!response.ok) {&#10;    //             throw new Error(&quot;Error en el envío de la reservación&quot;);&#10;    //         }&#10;&#10;    //         alert(&quot;¡Reservación enviada correctamente!&quot;);&#10;    //         window.location.href = &quot;/daypass/resumen&quot;;&#10;    //     } catch (error) {&#10;    //         alert(&quot;Ocurrió un error al enviar la reservación. Intenta de nuevo.&quot;);&#10;    //         console.error(error);&#10;    //     }&#10;    // }&#10;&#10;    // Métodos de pago y simulación de pago&#10;    const [metodoPago, setMetodoPago] = useState(&quot;efectivo&quot;);&#10;    const [paid, setPaid] = useState(true);&#10;    const [card, setCard] = useState({ name: &quot;&quot;, num: &quot;&quot;, exp: &quot;&quot;, cvc: &quot;&quot; });&#10;    const [isPaying, setIsPaying] = useState(false);&#10;&#10;    function isExpValid(exp: string) {&#10;        // MM/AA&#10;        if (!/^\d{2}\/\d{2}$/.test(exp)) return false;&#10;        const [mm, aa] = exp.split(&quot;/&quot;).map(Number);&#10;        if (mm &lt; 1 || mm &gt; 12) return false;&#10;        return true;&#10;    }&#10;&#10;    function handleExpChange(e: { target: { value: string; }; }) {&#10;        let value = e.target.value.replace(/\D/g, &quot;&quot;);&#10;        if (value.length &gt; 4) value = value.slice(0, 4);&#10;        if (value.length &gt; 2) value = value.slice(0, 2) + &quot;/&quot; + value.slice(2);&#10;        setCard(card =&gt; ({ ...card, exp: value }));&#10;    }&#10;&#10;    function handlePay(e: { preventDefault: () =&gt; void; }) {&#10;        e.preventDefault();&#10;        if (!isExpValid(card.exp)) return;&#10;        setIsPaying(true);&#10;        setTimeout(() =&gt; {&#10;            setPaid(true);&#10;            setIsPaying(false);&#10;        }, 1500);&#10;    }&#10;&#10;    function renderError(message: ReactNode, show: boolean) {&#10;        return (&#10;            &lt;div style={{ minHeight: &quot;20px&quot; }}&gt;&#10;                {show &amp;&amp; (&#10;                    &lt;span className=&quot;text-xs text-red-700 font-bold&quot;&gt;&#10;                        {message}&#10;                    &lt;/span&gt;&#10;                )}&#10;            &lt;/div&gt;&#10;        );&#10;    }&#10;&#10;    const handlePrevMonth = () =&gt; {&#10;        if (mes === 0) {&#10;            setMes(11);&#10;            setYear(year - 1);&#10;        } else {&#10;            setMes(mes - 1);&#10;        }&#10;        setSelectedDay(1);&#10;    };&#10;    const handleNextMonth = () =&gt; {&#10;        if (mes === 11) {&#10;            setMes(0);&#10;            setYear(year + 1);&#10;        } else {&#10;            setMes(mes + 1);&#10;        }&#10;        setSelectedDay(1);&#10;    };&#10;    // Para eliminar visitante&#10;    const handleRemoveVisitante = (idx: number) =&gt; {&#10;        setVisitantes((prev) =&gt; prev.filter((_, i) =&gt; i !== idx));&#10;        setTouched((prev) =&gt; prev.filter((_, i) =&gt; i !== idx));&#10;        setIneFiles((prev) =&gt; prev.filter((_, i) =&gt; i !== idx));&#10;    };&#10;    // Puede finalizar en efectivo&#10;    const puedeFinalizarEfectivo =&#10;      validateNombre(visitantes[0]?.nombre) &amp;&amp;&#10;      validateNombre(visitantes[0]?.apellido) &amp;&amp;&#10;      validateCelular(visitantes[0]?.celular) &amp;&amp;&#10;      validateCorreo(visitantes[0]?.correo, true) &amp;&amp;&#10;      ineFiles[0]?.frente &amp;&amp;&#10;      ineFiles[0]?.reverso;&#10;&#10;    // Guardar automáticamente visitantes, total, fechaVisita y horaVisita en localStorage&#10;    useEffect(() =&gt; {&#10;        const data = {&#10;            visitantes,&#10;            total,&#10;            fechaVisita: fechaSeleccionada,&#10;            horaVisita: selectedTime,&#10;        };&#10;        localStorage.setItem(&quot;reserva_data&quot;, JSON.stringify(data));&#10;        console.log(&quot;Datos de la reserva guardados en localStorage:&quot;, data);&#10;    }, [visitantes, total, fechaSeleccionada, selectedTime]);&#10;&#10;    // Handler para cambios de archivo INE&#10;    const handleIneFileChange = (idx: number, tipo: 'frente' | 'reverso', file: File | null) =&gt; {&#10;        setIneFiles((prev) =&gt; {&#10;            const copia = [...prev];&#10;            copia[idx][tipo] = file;&#10;            return copia;&#10;        });&#10;    };&#10;&#10;    const [paso, setPaso] = useState(1);&#10;    const pasos = [&#10;        { label: &quot;Huéspedes&quot;, paso: 1 },&#10;        { label: &quot;Fecha y Tiempo&quot;, paso: 2 },&#10;        { label: &quot;Verificar&quot;, paso: 3 },&#10;&#10;    ];&#10;&#10;    const imagenes = [&#10;        &quot;/assets/img-4.webp&quot;,      // Paso 1&#10;        &quot;/assets/img-5.webp&quot;,        // Paso 2&#10;        &quot;/image.png&quot;,   // Paso 3&#10;    ];&#10;&#10;&#10;    const hoy = new Date();&#10;    hoy.setHours(0,0,0,0);&#10;&#10;    const prevMonth = mes === 0 ? 11 : mes - 1;&#10;    const prevYear = mes === 0 ? year - 1 : year;&#10;    const lastDayPrevMonth = new Date(prevYear, prevMonth + 1, 0); // último día del mes anterior&#10;    lastDayPrevMonth.setHours(0,0,0,0);&#10;&#10;    const puedeIrMesAnterior = lastDayPrevMonth &gt;= hoy;&#10;&#10;  async function handleContinuar() {&#10;  const formData = new FormData();&#10;&#10;  // Tipado explícito y manejo de nombre completo&#10;  function separarNombreApellido(nombreCompleto: string): [string, string] {&#10;    const partes = nombreCompleto.trim().split(&quot; &quot;);&#10;    const nombre = partes.shift() || &quot;Nombre&quot;;&#10;    const apellido = partes.join(&quot; &quot;) || &quot;Apellido&quot;;&#10;    return [nombre, apellido];&#10;  }&#10;&#10;  const responsable = visitantes[0];&#10;  const [nombre, apellido] = separarNombreApellido(responsable.nombre);&#10;&#10;  // Información del cliente principal&#10;  formData.append(&quot;client[name]&quot;, nombre);&#10;  formData.append(&quot;client[lastname]&quot;, apellido);&#10;  formData.append(&quot;client[email]&quot;, responsable.correo || &quot;&quot;);&#10;  formData.append(&quot;client[phone]&quot;, responsable.celular || &quot;&quot;);&#10;  formData.append(&quot;client[birthdate]&quot;, responsable.cumple || &quot;&quot;);&#10;  formData.append(&quot;visit_date&quot;, fechaSeleccionada || &quot;&quot;);&#10;  formData.append(&quot;origin_city&quot;, responsable.ciudad || &quot;&quot;);&#10;  formData.append(&quot;payment_method&quot;, metodoPago || &quot;&quot;);&#10;&#10;  // Información de cada visitante&#10;  visitantes.forEach((v, idx) =&gt; {&#10;    const [n, a] = separarNombreApellido(v.nombre);&#10;&#10;    formData.append(`visitors[${idx}][name]`, n);&#10;    formData.append(`visitors[${idx}][lastname]`, a);&#10;    formData.append(`visitors[${idx}][birthdate]`, v.cumple || &quot;&quot;);&#10;    formData.append(`visitors[${idx}][email]`, v.correo || &quot;&quot;);&#10;    formData.append(`visitors[${idx}][phone]`, v.celular || &quot;&quot;);&#10;    formData.append(`visitors[${idx}][visitor_type_id]`, v.tipo === &quot;nino&quot; ? &quot;2&quot; : &quot;1&quot;);&#10;    formData.append(`visitors[${idx}][checkin_time]`, selectedTime?.substring(0, 5) || &quot;&quot;);&#10;&#10;    if (idx === 0) {&#10;      formData.append(`visitors[${idx}][document_type]`, &quot;INE&quot;);&#10;&#10;      if (ineFiles[idx]?.frente) {&#10;        formData.append(`visitors[${idx}][document_front]`, ineFiles[idx].frente, ineFiles[idx].frente.name);&#10;      }&#10;&#10;      if (ineFiles[idx]?.reverso) {&#10;        formData.append(`visitors[${idx}][document_back]`, ineFiles[idx].reverso, ineFiles[idx].reverso.name);&#10;      }&#10;    }&#10;  });&#10;&#10;  // Debug: revisar lo que se está enviando&#10;  for (const pair of formData.entries()) {&#10;    console.log(pair[0] + &quot;: &quot;, pair[1]);&#10;  }&#10;&#10;  try {&#10;    const res = await fetch(&quot;https://lasjaras-api.kerveldev.com/api/reservations&quot;, {&#10;      method: &quot;POST&quot;,&#10;      headers: {&#10;        Accept: &quot;application/json&quot;,&#10;      },&#10;      body: formData,&#10;    });&#10;&#10;    const json = await res.json();&#10;&#10;    if (!res.ok) {&#10;      console.error(&quot;Error al enviar reserva:&quot;, json);&#10;      alert(&quot;Error al enviar la reservación. Revisa los campos e intenta nuevamente.&quot;);&#10;      return;&#10;    }&#10;&#10;    console.log(&quot;Reserva enviada correctamente:&quot;, json);&#10;    window.location.href = &quot;/daypass/resumen&quot;;&#10;  } catch (error) {&#10;    console.error(&quot;Error inesperado:&quot;, error);&#10;    alert(&quot;Ocurrió un error al procesar la reservación.&quot;);&#10;  }&#10;}&#10;&#10;&#10;function getPrecioPorTipo(&#10;  fecha: string,&#10;  tipo: &quot;adulto&quot; | &quot;adulto60&quot; | &quot;nino&quot; | &quot;menor2&quot;,&#10;  esGrupo: boolean = false&#10;) {&#10;  const [year, month, day] = fecha.split(&quot;-&quot;);&#10;  const fechaLocal = new Date(Number(year), Number(month) - 1, Number(day));&#10;  const diaSemana = fechaLocal.getDay(); // 0=Domingo, ..., 6=Sábado&#10;&#10;  const esLunesAJueves = diaSemana &gt;= 1 &amp;&amp; diaSemana &lt;= 4;&#10;&#10;  if (tipo === &quot;adulto&quot;) {&#10;    if (esGrupo) return esLunesAJueves ? 325 : 390;&#10;    return esLunesAJueves ? 350 : 420;&#10;  }&#10;&#10;  if (tipo === &quot;adulto60&quot;) {&#10;    if (esGrupo) return esLunesAJueves ? 300 : 360;&#10;    return esLunesAJueves ? 300 : 360;&#10;  }&#10;&#10;  if (tipo === &quot;nino&quot;) return 70;&#10;  if (tipo === &quot;menor2&quot;) return 0;&#10;&#10;  return 0;&#10;}&#10;&#10;&#10;&#10;// ------------------------------------------------------------ RETURN --------------------------------------------------------------&#10;    return (&#10;&#10;&#10;        &lt;div className=&quot;min-h-screen flex flex-col bg-[#f8fafc]&quot;&gt;&#10;            &lt;Toaster position=&quot;top-center&quot; /&gt;&#10;            {/* &lt;Header /&gt; */}&#10;&#10;&#10;&#10;            {/* &lt;h1 className=&quot;text-2xl font-bold text-center mb-8 text-[#18668b] pt-12&quot;&gt;&#10;                Completa tu Reservación y Agenda tu Visita&#10;            &lt;/h1&gt; */}&#10;            &lt;main className=&quot;flex flex-row w-full min-h-[calc(100vh-120px)] max-w-none&quot;&gt;&#10;&#10;            &lt;section className=&quot;w-full md:w-1/2 flex flex-col justify-center px-8 py-12&quot;&gt;&#10;                 {/* Stepper visual */}&#10;            &lt;div className=&quot;flex items-center justify-center gap-6 mt-0 mb-auto&quot;&gt;&#10;              {paso &gt; 1 &amp;&amp; (&#10;                &lt;button&#10;                  type=&quot;button&quot;&#10;                  onClick={() =&gt; setPaso(paso - 1)}&#10;                  className=&quot;mr-4 flex items-center justify-center text-[#18668b] hover:text-[#14526d] transition&quot;&#10;                  title=&quot;Regresar al paso anterior&quot;&#10;                &gt;&#10;                  &lt;svg width=&quot;24&quot; height=&quot;24&quot; fill=&quot;none&quot; stroke=&quot;currentColor&quot; strokeWidth=&quot;2&quot; viewBox=&quot;0 0 24 24&quot;&gt;&#10;                    &lt;path d=&quot;M15 19l-7-7 7-7&quot; strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot;/&gt;&#10;                  &lt;/svg&gt;&#10;                &lt;/button&gt;&#10;              )}&#10;              {pasos.map((step, idx) =&gt; {&#10;                const completado = paso &gt; step.paso;&#10;                const activo = paso === step.paso;&#10;                return (&#10;                  &lt;div key={step.label} className=&quot;flex flex-col items-center min-w-[90px]&quot;&gt;&#10;                    &lt;span&#10;                      className={`text-sm font-semibold pb-1 transition&#10;                        ${activo || completado&#10;                          ? &quot;text-[#18668b]&quot;&#10;                          : &quot;text-gray-400&quot;&#10;                        }`}&#10;                    &gt;&#10;                      {step.label}&#10;                    &lt;/span&gt;&#10;                    &lt;div&#10;                      className={`w-full h-1 mt-1 rounded&#10;                        ${activo || completado&#10;                          ? &quot;bg-[#18668b]&quot;&#10;                          : &quot;bg-gray-200&quot;&#10;                        }`}&#10;                    /&gt;&#10;                  &lt;/div&gt;&#10;                );&#10;              })}&#10;            &lt;/div&gt;&#10;                {/* paso 1: Huéspedes */}&#10;                {paso === 1 &amp;&amp; (&#10;                    &lt;&gt;&#10;                        &lt;div className=&quot;text-gray-700 text-5xl font-bold mb-6 mt-2&quot;&gt;&#10;                            ¿Cuántos visitantes son?&#10;                        &lt;/div&gt;&#10;                        &lt;p className=&quot;mb-10 text-gray-600 text-2xl&quot;&gt;&#10;                        El precio varía según el horario. Niños menores de 2 años entran gratis.&#10;                        &lt;/p&gt;&#10;                        &lt;div className=&quot;space-y-6 mb-0 mt-auto&quot;&gt;&#10;                            {/* Adultos */}&#10;                            &lt;div className=&quot;flex items-center justify-between bg-white rounded shadow p-5 mb-10 &quot;&gt;&#10;                                &lt;span className=&quot;font-semibold text-lg&quot;&gt;Adultos 14 +&lt;/span&gt;&#10;                                &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;                                    &lt;button&#10;                                        type=&quot;button&quot;&#10;                                        className=&quot;px-3 py-1 rounded text-xl font-bold bg-gray-200 hover:bg-[#302f2f] text-black hover:text-white&quot;&#10;                                        onClick={() =&gt; {&#10;                                            if (adultos &gt; 1) {&#10;                                                setAdultos(adultos - 1);&#10;                                                setVisitantes((prev) =&gt; {&#10;                                                    const nuevo = prev.slice(0, prev.length - 1);&#10;                                                    // Siempre deja al menos un visitante&#10;                                                    return nuevo.length === 0 ? [{ nombre: &quot;&quot;, apellido:&quot;&quot;, correo: &quot;&quot;, celular: &quot;&quot;, cumple: &quot;&quot;, ciudad:&quot;&quot;, estado:&quot;&quot;, pais:&quot;&quot;,tipo: &quot;adulto&quot;,}] : nuevo;&#10;                                                });&#10;                                                setTouched((prev) =&gt; {&#10;                                                    const nuevo = prev.slice(0, prev.length - 1);&#10;                                                    return nuevo.length === 0 ? [ {nombre: false, apellido:false, correo: false, celular: false, cumple: false, ciudad: false, estado: false, pais: false, ine: false,}] : nuevo;&#10;                                                });&#10;                                                setIneFiles((prev) =&gt; {&#10;                                                    const nuevo = prev.slice(0, prev.length - 1);&#10;                                                    return nuevo.length === 0 ? [{ frente: null, reverso: null }] : nuevo;&#10;                                                });&#10;                                                // Si al bajar adultos hay más niños que el nuevo máximo, ajusta niños&#10;                                                if (ninos &gt; (adultos - 1) * 2) setNinos((adultos - 1) * 2);&#10;                                            }&#10;                                        }}&#10;                                        disabled={adultos &lt;= 1}&#10;                                    &gt;-&lt;/button&gt;&#10;                                    &lt;span className=&quot;text-xl font-bold&quot;&gt;{adultos}&lt;/span&gt;&#10;                                    &lt;button&#10;                                        type=&quot;button&quot;&#10;                                        className=&quot;px-3 py-1 rounded text-xl font-bold bg-gray-200 hover:bg-[#302f2f] text-black hover:text-white&quot;&#10;                                        onClick={() =&gt; {&#10;&#10;                                                setAdultos(adultos + 1);&#10;                                                setVisitantes((prev) =&gt; [...prev, { nombre: &quot;&quot;, apellido:&quot;&quot;, correo: &quot;&quot;, celular: &quot;&quot;, cumple:&quot;&quot;, ciudad:&quot;&quot;,estado:&quot;&quot;,pais:&quot;&quot;,tipo: &quot;adulto&quot;,}]);&#10;                                                setTouched((prev) =&gt; [...prev, {nombre: false, apellido:false, correo: false, celular: false, cumple: false, ciudad: false, estado: false, pais: false, ine: false,}]);&#10;                                                setIneFiles((prev) =&gt; [...prev, { frente: null, reverso: null }]);&#10;&#10;                                        }}&#10;                                    &gt;+&lt;/button&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                             {/* Adultos 60+ */}&#10;                            &lt;div className=&quot;flex items-center justify-between bg-white rounded shadow p-5 mb-10 &quot;&gt;&#10;                                &lt;span className=&quot;font-semibold text-lg&quot;&gt;Adultos 60 +&lt;/span&gt;&#10;                                &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;                                    &lt;button&#10;                                        type=&quot;button&quot;&#10;                                        className=&quot;px-3 py-1 rounded text-xl font-bold bg-gray-200 hover:bg-[#302f2f] text-black hover:text-white&quot;&#10;                                        onClick={() =&gt; {&#10;                                            if (adultos60 &gt; 0) {&#10;                                                setAdultos60(adultos60 - 1);&#10;                                                setVisitantes((prev) =&gt; {&#10;                                                    const nuevo = prev.slice(0, prev.length - 1);&#10;                                                    return nuevo;&#10;                                                });&#10;                                                setTouched((prev) =&gt; {&#10;                                                    const nuevo = prev.slice(0, prev.length - 1);&#10;                                                    return nuevo.length === 0 ? [{nombre: false, apellido: false, correo: false, celular: false, cumple: false, ciudad: false, estado: false, pais: false, ine: false,}] : nuevo;&#10;                                                });&#10;                                                setIneFiles((prev) =&gt; {&#10;                                                    const nuevo = prev.slice(0, prev.length - 1);&#10;                                                    return nuevo.length === 0 ? [{ frente: null, reverso: null }] : nuevo;&#10;                                                });&#10;&#10;                                            }&#10;                                        }}&#10;                                        disabled={adultos60 &lt;= 0}&#10;&#10;                                    &gt;-&lt;/button&gt;&#10;                                    &lt;span className=&quot;text-xl font-bold&quot;&gt;{adultos60}&lt;/span&gt;&#10;                                    &lt;button&#10;                                        type=&quot;button&quot;&#10;                                        className=&quot;px-3 py-1 rounded text-xl font-bold bg-gray-200 hover:bg-[#302f2f] text-black hover:text-white&quot;&#10;                                        onClick={() =&gt; {&#10;&#10;                                                setAdultos60(adultos60 + 1);&#10;                                                setVisitantes((prev) =&gt; [...prev, { nombre: &quot;&quot;, apellido:&quot;&quot;, correo: &quot;&quot;, celular: &quot;&quot; , cumple:&quot;&quot;, ciudad:&quot;&quot;, estado:&quot;&quot;, pais:&quot;&quot;,tipo: &quot;adulto&quot;, }]);&#10;                                                setTouched((prev) =&gt; [...prev, {nombre: false, apellido:false, correo: false, celular: false, cumple: false, ciudad: false, estado: false, pais: false, ine: false,}]);&#10;                                                setIneFiles((prev) =&gt; [...prev, { frente: null, reverso: null }]);&#10;&#10;                                        }}&#10;                                    &gt;+&lt;/button&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                            {/* Niños */}&#10;                            &lt;div className=&quot;flex items-center justify-between bg-white rounded shadow p-5 &quot;&gt;&#10;                                    &lt;span className=&quot;font-semibold text-lg&quot;&gt;Niños 2 - 13&lt;/span&gt;&#10;                                    &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;                                    &lt;button&#10;                                        type=&quot;button&quot;&#10;                                        className=&quot;px-3 py-1 rounded text-xl font-bold bg-gray-200 hover:bg-[#302f2f] text-black hover:text-white&quot;&#10;                                       onClick={() =&gt; {&#10;                                        if (ninos &gt; 0) {&#10;                                            setNinos(ninos - 1);&#10;&#10;                                            // Filtrar visitantes para eliminar el último niño&#10;                                            setVisitantes((prev) =&gt; {&#10;                                                const sinUltimoNino = [...prev];&#10;                                                const idxUltimoNino = [...prev].map(v =&gt; v.tipo).lastIndexOf(&quot;nino&quot;);&#10;                                                if (idxUltimoNino !== -1) sinUltimoNino.splice(idxUltimoNino, 1);&#10;                                                return sinUltimoNino;&#10;                                            });&#10;                                        }&#10;                                    }}&#10;                                        disabled={ninos &lt;= 0}&#10;                                    &gt;-&lt;/button&gt;&#10;                                    &lt;span className=&quot;text-xl font-bold&quot;&gt;{ninos}&lt;/span&gt;&#10;                                    &lt;button&#10;                                        type=&quot;button&quot;&#10;                                        className=&quot;px-3 py-1 rounded text-xl font-bold bg-gray-200 hover:bg-[#302f2f] text-black hover:text-white&quot;&#10;                                        onClick={() =&gt; {&#10;                                            if (ninos &lt; adultos * 2) {&#10;                                                setNinos(ninos + 1);&#10;                                                setVisitantes((prev) =&gt; [&#10;                                                    ...prev,&#10;                                                    { nombre: &quot;&quot;,apellido: &quot;&quot;, correo: &quot;&quot;, celular: &quot;&quot; , cumple:&quot;&quot;, ciudad:&quot;&quot;, estado:&quot;&quot;, pais:&quot;&quot;,tipo: &quot;nino&quot; } // Solo nombre y cumpleaños para niños&#10;                                                ]);&#10;                                                setTouched((prev) =&gt; [&#10;                                                    ...prev,&#10;                                                    {nombre: false,apellido: false, correo: false, celular: false, cumple: false, ciudad: false, estado: false, pais: false, ine: false,}&#10;                                                ]);&#10;                                                setIneFiles((prev) =&gt; [&#10;                                                    ...prev,&#10;                                                    { frente: null, reverso: null }&#10;                                                ]);&#10;                                            }&#10;                                        }}&#10;                                        disabled={ninos &gt;= adultos * 2}&#10;                                    &gt;+&lt;/button&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                        {ninos &gt; 0 &amp;&amp; (&#10;                        &lt;div className=&quot;bg-[#ffff0009] border-l-4 border-yellow-400 p-4 -mb-20 text-sm text-gray-700 mt-2&quot;&gt;&#10;                            Los niños de 2 a 13 años deben estar acompañados por un adulto. No incluye acceso al jardín termal, acceso GRATIS para niños menores de 2 años.&#10;                        &lt;/div&gt;&#10;                        )}&#10;&#10;                         {adultos60 &gt; 0 &amp;&amp; (&#10;                        &lt;div className=&quot;bg-[#ffff0009] border-l-4 border-yellow-400 p-4 -mb-41 text-sm text-gray-700 mt-23&quot;&gt;&#10;                           Los adultos mayores de 60 años de edad deberán presentar tarjeda del INAPAM actualizada, de lo contrario se cobrará la entrada a precio regular.&#10;                        &lt;/div&gt;&#10;                        )}&#10;                         {adultos + adultos60 &gt;= 12 &amp;&amp; (&#10;                        &lt;div className=&quot;bg-[#ffff0009] border-l-4 border-yellow-400 p-4 -mb-49 text-sm text-gray-700 mt-44&quot;&gt;&#10;                           Al reservar para 12 o más adultos, se aplicará automáticamente una tarifa preferencial. Para grupos de 15 personas o más, se otorgarán cortesías proporcionales según la cantidad total de asistentes (los precios y cortesias se veran reflejados en el calculo final).&#10;&#10;                        &lt;/div&gt;&#10;                        )}&#10;                        &lt;button&#10;                        className={`w-full py-7 rounded font-bold text-white mt-50 transition-colors ${&#10;                            puedeAvanzarPaso2()&#10;                                ? &quot;bg-gradient-to-r bg-[#62a7c7] hover:bg-[#14526d] cursor-pointer&quot;&#10;                                : &quot;bg-gray-400 cursor-not-allowed&quot;&#10;                        }`}&#10;                        onClick={() =&gt; setPaso(2)}&#10;                        &gt;&#10;                        Continuar&#10;                        &lt;/button&gt;&#10;                    &lt;/&gt;&#10;                }&#10;&#10;&#10;                {/* Paso 2: Fecha y horario */}&#10;                {paso === 2 &amp;&amp; (&#10;                &lt;&gt;&#10;                    &lt;div className=&quot; text-gray-700 text-4xl font-bold mb-6 mt-10&quot;&gt;&#10;                        Selecciona la fecha y el horario de tu visita&#10;                    &lt;/div&gt;&#10;                     &lt;p className=&quot; mb-20 text-gray-600 text-2xl&quot;&gt;&#10;                        Estamos abiertos todos los días del año.&#10;                        &lt;/p&gt;&#10;&#10;                    &lt;div className=&quot;flex flex-col md:flex-row gap-6 -mb-10 &quot;&gt;&#10;                      {/* Calendario*/}&#10;                        &lt;div className=&quot;w-full max-w-4xl mx-auto p-0&quot;&gt;&#10;                        &lt;div className=&quot;bg-white border rounded-lg p-10 shadow-md&quot;&gt;&#10;                            {/* Navegación */}&#10;                            &lt;div className=&quot;flex items-center justify-between mb-6&quot;&gt;&#10;                            &lt;button&#10;                                className={`text-sm font-bold hover:underline ${&#10;                                puedeIrMesAnterior&#10;                                    ? &quot;text-[#688b18] cursor-pointer&quot;&#10;                                    : &quot;text-gray-400 cursor-not-allowed&quot;&#10;                                }`}&#10;                                onClick={handlePrevMonth}&#10;                                type=&quot;button&quot;&#10;                                disabled={!puedeIrMesAnterior}&#10;                            &gt;&#10;                                ← Mes anterior&#10;                            &lt;/button&gt;&#10;                            &lt;span className=&quot;text-lg font-bold capitalize&quot;&gt;&#10;                                {new Date(year, mes).toLocaleDateString(&quot;es-MX&quot;, {&#10;                                month: &quot;long&quot;,&#10;                                year: &quot;numeric&quot;,&#10;                                })}&#10;                            &lt;/span&gt;&#10;                            &lt;button&#10;                                className=&quot;text-sm text-[#18668b] font-bold hover:underline&quot;&#10;                                onClick={handleNextMonth}&#10;                                type=&quot;button&quot;&#10;                            &gt;&#10;                                Mes siguiente →&#10;                            &lt;/button&gt;&#10;                            &lt;/div&gt;&#10;&#10;                            {/* Días de la semana */}&#10;                            &lt;div className=&quot;grid grid-cols-7 text-center text-sm font-semibold mb-2&quot;&gt;&#10;                            {diasSemana.map((dia) =&gt; (&#10;                                &lt;span key={dia} className=&quot;text-gray-600&quot;&gt;{dia}&lt;/span&gt;&#10;                            ))}&#10;                            &lt;/div&gt;&#10;&#10;                            {/* Días del mes */}&#10;                            &lt;div className=&quot;grid grid-cols-7 gap-2&quot;&gt;&#10;                            {[...Array(primerDia).keys()].map((_, i) =&gt; (&#10;                                &lt;div key={&quot;empty-&quot; + i}&gt;&lt;/div&gt;&#10;                            ))}&#10;                            {dias.map((dia) =&gt; {&#10;                                // Calcula la fecha completa del día actual en el mes&#10;                                const fechaBtn = new Date(year, mes, dia);&#10;                                const hoy = new Date();&#10;                                hoy.setHours(0,0,0,0); // Ignora la hora&#10;&#10;                                const isSelected = selectedDay === dia;&#10;                                const isDisabled = fechaBtn &lt; hoy;&#10;&#10;                                return (&#10;                                    &lt;button&#10;                                        key={dia}&#10;                                        type=&quot;button&quot;&#10;                                        onClick={() =&gt; !isDisabled &amp;&amp; setSelectedDay(dia)}&#10;                                        disabled={isDisabled}&#10;                                        className={`w-12 h-12 text-base rounded-full border flex items-center justify-center transition&#10;                                            ${isSelected&#10;                                                ? &quot;bg-[#18668b] text-white border-[#18668b]&quot;&#10;                                                : isDisabled&#10;                                                    ? &quot;bg-gray-100 text-gray-400 border-gray-200 cursor-not-allowed&quot;&#10;                                                    : &quot;bg-white hover:bg-gray-100 border-gray-300 text-gray-700&quot;&#10;                                            }&#10;                                        `}&#10;                                    &gt;&#10;                                        {dia}&#10;                                    &lt;/button&gt;&#10;                                );&#10;                            })}&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                      {/* Horarios */}&#10;                      &#10;                    &lt;div className=&quot;w-full md:w-1/2&quot;&gt;&#10;                      &lt;p className=&quot; mb-10 text-gray-800 text-base font-bold&quot;&gt;&#10;                        Selecciona tu horario de llegada.&#10;                        &lt;/p&gt;&#10;                        &lt;div className=&quot;grid grid-cols-1 md:grid-cols-1 gap-10&quot;&gt;&#10;                            {horarios.map((hora) =&gt; {&#10;                                const horarioPasado = isHorarioPasado(hora);&#10;                                return (&#10;                                    &lt;button&#10;                                        key={hora}&#10;                                        type=&quot;button&quot;&#10;                                        disabled={horarioPasado}&#10;                                        className={`rounded border py-2 font-semibold text-sm w-full transition&#10;                                            ${horarioPasado&#10;                                                ? &quot;bg-gray-100 text-gray-400 border-gray-200 cursor-not-allowed&quot;&#10;                                                : selectedTime === hora&#10;                                                    ? &quot;bg-[#18668b] text-white border-[#18668b]&quot;&#10;                                                    : &quot;bg-white border-gray-300 hover:bg-gray-100 text-gray-800&quot;&#10;                                            }&#10;                                        `}&#10;                                        onClick={() =&gt; !horarioPasado &amp;&amp; setSelectedTime(hora)}&#10;                                    &gt;&#10;                                        {hora} {horarioPasado &amp;&amp; &quot;(No disponible)&quot;}&#10;                                    &lt;/button&gt;&#10;                                );&#10;                            })}&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;&#10;                   &lt;button&#10;                        className={`w-full py-7 rounded font-bold text-white mt-30 transition-colors ${&#10;                            puedeAvanzarPaso2()&#10;                                ? &quot;bg-gradient-to-r bg-[#62a7c7] hover:bg-[#14526d] cursor-pointer&quot;&#10;                                : &quot;bg-gray-400 cursor-not-allowed&quot;&#10;                        }`}&#10;                        onClick={() =&gt; puedeAvanzarPaso2() &amp;&amp; setPaso(3)}&#10;                        disabled={!puedeAvanzarPaso2()}&#10;                        &gt;&#10;                        Continuar&#10;                        &lt;/button&gt;&#10;                &lt;/&gt;&#10;                )}&#10;&#10;&#10;                {/* Paso 3:  */}&#10;                {paso === 3 &amp;&amp; (&#10;                    &lt;div className=&quot;relative h-[800px] overflow-hidden&quot;&gt;&#10;                        &lt;div className=&quot;overflow-y-auto h-full&quot;&gt;&#10;&#10;                            &lt;div className=&quot;text-gray-700 text-4xl font-bold mb-5 mt-5 overflow-hidden&quot;&gt;&#10;                            Detalles de la reserva&#10;                            &lt;/div&gt;&#10;                            &lt;form className=&quot;space-y-4&quot;&gt;&#10;                            {visitantes.map((vis, idx) =&gt; {&#10;                                // Es niño si no tiene correo ni celular&#10;                                const esNino = vis.tipo === &quot;nino&quot;;&#10;                                const nombreValido = validateNombre(vis.nombre);&#10;                                const apellidoValido = validateNombre(vis.apellido);&#10;                                const correoValido = validateCorreo(vis.correo, idx === 0); // solo obligatorio para el primer visitante&#10;                                const celularValido = validateCelular(vis.celular);&#10;                                const cumpleValido = validateCumple(vis.cumple);&#10;                                const ciudadValido = validateCiudad(vis.ciudad);&#10;                                const estadoValido = validateEstado(vis.estado);&#10;                                const paisValido = validatePais(vis.pais);&#10;&#10;                                return (&#10;                                &lt;div key={idx} className=&quot;p-4 flex flex-col gap-4 relative  rounded border&quot;&gt;&#10;                                     &lt;div className=&quot;flex flex-row gap-6&quot;&gt;&#10;                                    {/* Nombre */}&#10;                                    &lt;div className=&quot;flex flex-col flex-1&quot;&gt;&#10;                                   &lt;label className=&quot;block text-xs font-bold text-black mb-1&quot;&gt;&#10;                                    {`Visitante ${idx + 1} ${esNino ? &quot;(Niño)&quot; : idx === 0 ? &quot;(Tú)&quot; : &quot;&quot;}`}&#10;                                    &lt;/label&gt;&#10;                                    &lt;input&#10;                                        type=&quot;text&quot;&#10;                                        placeholder=&quot;Nombre/s&quot;&#10;                                        value={vis.nombre}&#10;                                        onChange={(e) =&gt; handleVis(idx, &quot;nombre&quot;, e.target.value)}&#10;                                         onBlur={() =&gt; handleBlur(idx, &quot;nombre&quot;)}&#10;                                        className={`border p-2 rounded w-full transition-colors duration-150 h-13 ${ touched[idx]?.nombre &amp;&amp; !nombreValido ? &quot;border-red-500&quot; : &quot;border-gray-300&quot;}`}&#10;                                        required&#10;                                    /&gt;&#10;                                    {touched[idx]?.nombre &amp;&amp; !nombreValido &amp;&amp; (&#10;                                        &lt;p className=&quot;text-red-600 text-sm mt-1&quot;&gt;El nombre es obligatorio.&lt;/p&gt;&#10;                                    )}&#10;                                    &lt;/div&gt;&#10;                                      {/* Apellido */}&#10;                                    &lt;div className=&quot;flex flex-col flex-1&quot;&gt;&#10;                                   &lt;label className=&quot;block text-xs font-bold text-black mb-1&quot;&gt;&#10;                                    Apellidos&#10;                                    &lt;/label&gt;&#10;                                    &lt;input&#10;                                        type=&quot;text&quot;&#10;                                        placeholder=&quot;Apellidos&quot;&#10;                                        value={vis.apellido}&#10;                                        onChange={(e) =&gt; handleVis(idx, &quot;apellido&quot;, e.target.value)}&#10;                                         onBlur={() =&gt; handleBlur(idx, &quot;apellido&quot;)}&#10;                                        className={`border p-2 rounded w-full transition-colors duration-150 h-13 ${ touched[idx]?.apellido &amp;&amp; !apellidoValido ? &quot;border-red-500&quot; : &quot;border-gray-300&quot;}`}&#10;                                        required&#10;                                    /&gt;&#10;                                    {touched[idx]?.apellido &amp;&amp; !apellidoValido &amp;&amp; (&#10;                                        &lt;p className=&quot;text-red-600 text-sm mt-1&quot;&gt;Este campo es obligatorio.&lt;/p&gt;&#10;                                    )}&#10;                                    &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                    {/* Solo adultos: correo y celular */}&#10;                                    {!esNino &amp;&amp; (&#10;                                    &lt;div className=&quot;flex flex-row gap-6&quot;&gt;&#10;                                        {/* Correo */}&#10;                                        &lt;div className=&quot;flex flex-col flex-1&quot;&gt;&#10;                                        &lt;label className=&quot;block text-xs font-bold text-black mb-1&quot;&gt;&#10;                                            Correo Electrónico &lt;span className=&quot;text-[10px]&quot;&gt;{idx === 0 ? &quot;(Principal)&quot; : &quot;(opcional)&quot;}&lt;/span&gt;&#10;                                        &lt;/label&gt;&#10;                                        &lt;input&#10;                                            type=&quot;email&quot;&#10;                                            placeholder=&quot;Correo electrónico&quot;&#10;                                            value={vis.correo}&#10;                                            onChange={(e) =&gt; handleVis(idx, &quot;correo&quot;, e.target.value)}&#10;                                            onBlur={() =&gt; handleBlur(idx, &quot;correo&quot;)}&#10;                                            className={`border p-2 rounded w-full transition-colors duration-150 h-13 ${&#10;                                            touched[idx]?.correo &amp;&amp; !correoValido ? &quot;border-red-500&quot; : &quot;border-gray-300&quot;&#10;                                            }`}&#10;                                        /&gt;&#10;                                        {touched[idx]?.correo &amp;&amp; !correoValido &amp;&amp; (&#10;                                            &lt;p className=&quot;text-red-600 text-sm mt-1&quot;&gt;Correo electrónico inválido.&lt;/p&gt;&#10;                                        )}&#10;                                        &lt;/div&gt;&#10;&#10;                                        {/* Celular */}&#10;                                        &lt;div className=&quot;flex flex-col flex-1&quot;&gt;&#10;                                        &lt;label className=&quot;block text-xs font-bold text-black mb-1&quot;&gt;&#10;                                            Celular WhatsApp&#10;                                        &lt;/label&gt;&#10;                                        &lt;input&#10;                                            type=&quot;tel&quot;&#10;                                            inputMode=&quot;numeric&quot;&#10;                                            pattern=&quot;\d{10,}&quot;&#10;                                            placeholder=&quot;Ej. 3312345678&quot;&#10;                                            value={vis.celular}&#10;                                            onChange={(e) =&gt; handleVis(idx, &quot;celular&quot;, e.target.value)}&#10;                                            onBlur={() =&gt; handleBlur(idx, &quot;celular&quot;)}&#10;                                            className={`border p-2 rounded w-full transition-colors duration-150 h-13 ${&#10;                                            touched[idx]?.celular &amp;&amp; !celularValido ? &quot;border-red-500&quot; : &quot;border-gray-300&quot;&#10;                                            }`}&#10;                                        /&gt;&#10;                                        {touched[idx]?.celular &amp;&amp; !celularValido &amp;&amp; (&#10;                                            &lt;p className=&quot;text-red-600 text-sm mt-1&quot;&gt;Debe tener al menos 10 dígitos.&lt;/p&gt;&#10;                                        )}&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                    )}&#10;                                    {/* Cumpleaños */}&#10;                                    &lt;div className=&quot;flex flex-col flex-1&quot;&gt;&#10;                                    &lt;label className=&quot;block text-xs font-bold text-black mb-1&quot;&gt;&#10;                                        Fecha de nacimiento&#10;                                    &lt;/label&gt;&#10;                                    &lt;input&#10;                                        type=&quot;date&quot;&#10;                                        value={vis.cumple}&#10;                                        onChange={(e) =&gt; handleVis(idx, &quot;cumple&quot;, e.target.value)}&#10;                                        onBlur={() =&gt; handleBlur(idx, &quot;cumple&quot;)}&#10;                                        className={`border p-2 rounded w-full transition-colors duration-150 h-13 ${&#10;                                        touched[idx]?.cumple &amp;&amp; !cumpleValido ? &quot;border-red-500&quot; : &quot;border-gray-300&quot;&#10;                                        }`}&#10;                                    /&gt;&#10;                                    {touched[idx]?.cumple &amp;&amp; !cumpleValido &amp;&amp; (&#10;                                        &lt;p className=&quot;text-red-600 text-sm mt-1&quot;&gt;Selecciona una fecha válida.&lt;/p&gt;&#10;                                    )}&#10;                                    &lt;/div&gt;&#10;&#10;                                    {/* Solo visitante 1: ciudad, estado, país */}&#10;                                    {idx === 0 &amp;&amp; !esNino &amp;&amp; (&#10;                                    &lt;&gt;&#10;                                        &lt;div className=&quot;flex flex-row gap-6&quot;&gt;&#10;                                            {/* Ciudad */}&#10;                                            &lt;div className=&quot;flex flex-col flex-1&quot;&gt;&#10;                                            &lt;label className=&quot;block text-xs font-bold text-black mb-1&quot;&gt;Ciudad&lt;/label&gt;&#10;                                            &lt;select&#10;                                                value={vis.ciudad}&#10;                                                onChange={(e) =&gt; handleCiudadChange(idx, e.target.value)}&#10;                                                onBlur={() =&gt; handleBlur(idx, &quot;ciudad&quot;)}&#10;                                                className={`border p-2 rounded w-full transition-colors duration-150 h-13 text-black ${&#10;                                                touched[idx]?.ciudad &amp;&amp; !ciudadValido ? &quot;border-red-500&quot; : &quot;border-gray-300&quot;&#10;                                                }`}&#10;                                                disabled={!vis.estado}&#10;                                            &gt;&#10;                                                &lt;option value=&quot;&quot;&gt;Selecciona ciudad&lt;/option&gt;&#10;                                                {(ciudades ?? []).map((ciudad) =&gt; (&#10;                                                &lt;option key={ciudad} value={ciudad}&gt;&#10;                                                    {ciudad}&#10;                                                &lt;/option&gt;&#10;                                                ))}&#10;                                            &lt;/select&gt;&#10;                                            {touched[idx]?.ciudad &amp;&amp; !ciudadValido &amp;&amp; (&#10;                                                &lt;p className=&quot;text-red-600 text-sm mt-1&quot;&gt;La ciudad es obligatoria.&lt;/p&gt;&#10;                                            )}&#10;                                            &lt;/div&gt;&#10;&#10;                                            {/* Estado */}&#10;                                            &lt;div className=&quot;flex flex-col flex-1&quot;&gt;&#10;                                            &lt;label className=&quot;block text-xs font-bold text-black mb-1&quot;&gt;Estado&lt;/label&gt;&#10;                                            &lt;select&#10;                                                value={vis.estado}&#10;                                                onChange={(e) =&gt; handleEstadoChange(idx, e.target.value)}&#10;                                                onBlur={() =&gt; handleBlur(idx, &quot;estado&quot;)}&#10;                                                className={`border p-2 rounded w-full transition-colors duration-150 h-13 text-black ${&#10;                                                touched[idx]?.estado &amp;&amp; !estadoValido ? &quot;border-red-500&quot; : &quot;border-gray-300&quot;&#10;                                                }`}&#10;                                                disabled={!vis.pais}&#10;                                            &gt;&#10;                                                &lt;option value=&quot;&quot;&gt;Selecciona estado&lt;/option&gt;&#10;                                                {(estados ?? []).map((estado) =&gt; (&#10;                                                &lt;option key={estado} value={estado}&gt;&#10;                                                    {estado}&#10;                                                &lt;/option&gt;&#10;                                                ))}&#10;                                            &lt;/select&gt;&#10;                                            {touched[idx]?.estado &amp;&amp; !estadoValido &amp;&amp; (&#10;                                                &lt;p className=&quot;text-red-600 text-sm mt-1&quot;&gt;El estado es obligatorio.&lt;/p&gt;&#10;                                            )}&#10;                                            &lt;/div&gt;&#10;&#10;                                                {/* País */}&#10;                                            &lt;div className=&quot;flex flex-col flex-1&quot;&gt;&#10;                                            &lt;label className=&quot;block text-xs font-bold text-black mb-1&quot;&gt;País&lt;/label&gt;&#10;                                            &lt;select&#10;                                                value={vis.pais}&#10;                                                onChange={(e) =&gt; handlePaisChange(idx, e.target.value)}&#10;                                                onBlur={() =&gt; handleBlur(idx, &quot;pais&quot;)}&#10;                                                className={`border p-2 rounded w-full transition-colors duration-150 h-13 text-black ${&#10;                                                touched[idx]?.pais &amp;&amp; !paisValido ? &quot;border-red-500&quot; : &quot;border-gray-300&quot;&#10;                                                }`}&#10;                                            &gt;&#10;                                                &lt;option value=&quot;&quot;&gt;Selecciona país&lt;/option&gt;&#10;                                                {(paises ?? []).map((pais) =&gt; (&#10;                                                &lt;option key={pais} value={pais}&gt;&#10;                                                    {pais}&#10;                                                &lt;/option&gt;&#10;                                                ))}&#10;                                            &lt;/select&gt;&#10;                                            {touched[idx]?.pais &amp;&amp; !paisValido &amp;&amp; (&#10;                                                &lt;p className=&quot;text-red-600 text-sm mt-1&quot;&gt;El país es obligatorio.&lt;/p&gt;&#10;                                            )}&#10;                                            &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                     {/* INE Frente */}&#10;                                        &lt;div className=&quot;flex flex-row items-start gap-4 mt-4&quot;&gt;&#10;                                        &lt;div className=&quot;flex flex-col flex-1&quot;&gt;&#10;                                            &lt;label className=&quot;block text-xs font-bold text-black mb-1&quot;&gt;&#10;                                            INE Frente (Imagen o PDF)&#10;                                            &lt;/label&gt;&#10;                                            &lt;input&#10;                                            type=&quot;file&quot;&#10;                                            accept=&quot;image/*,.pdf&quot;&#10;                                            onChange={e =&gt;&#10;                                                handleIneFileChange(idx, 'frente', e.target.files ? e.target.files[0] : null)&#10;                                            }&#10;                                            className=&quot;border p-1 rounded text-xs h-10&quot;&#10;                                            /&gt;&#10;                                            {ineFiles[idx]?.frente &amp;&amp; (&#10;                                            &lt;span className=&quot;text-xs text-green-600 mt-1&quot;&gt;&#10;                                                Archivo listo: {ineFiles[idx].frente.name}&#10;                                            &lt;/span&gt;&#10;                                            )}&#10;                                        &lt;/div&gt;&#10;&#10;                                        {/* Visualizador a la derecha */}&#10;                                        &lt;div&gt;&#10;                                            {ineFiles[idx]?.frente?.type?.startsWith(&quot;image/&quot;) &amp;&amp; (&#10;                                            &lt;img&#10;                                                src={URL.createObjectURL(ineFiles[idx].frente)}&#10;                                                alt=&quot;Previsualización INE Frente&quot;&#10;                                                className=&quot;max-w-[350px] rounded border&quot;&#10;                                            /&gt;&#10;                                            )}&#10;&#10;                                            {ineFiles[idx]?.frente?.type === &quot;application/pdf&quot; &amp;&amp; (&#10;                                            &lt;a&#10;                                                href={URL.createObjectURL(ineFiles[idx].frente)}&#10;                                                target=&quot;_blank&quot;&#10;                                                rel=&quot;noopener noreferrer&quot;&#10;                                                className=&quot;text-blue-600 text-xs underline&quot;&#10;                                            &gt;&#10;                                                Ver PDF INE Frente&#10;                                            &lt;/a&gt;&#10;                                            )}&#10;                                        &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;&#10;                                        {/* INE Reverso */}&#10;                                        &lt;div className=&quot;flex flex-row items-start gap-4 mt-4&quot;&gt;&#10;                                        &lt;div className=&quot;flex flex-col flex-1&quot;&gt;&#10;                                            &lt;label className=&quot;block text-xs font-bold text-black mb-1&quot;&gt;&#10;                                            INE Reverso (Imagen o PDF)&#10;                                            &lt;/label&gt;&#10;                                            &lt;input&#10;                                            type=&quot;file&quot;&#10;                                            accept=&quot;image/*,.pdf&quot;&#10;                                            onChange={e =&gt;&#10;                                                handleIneFileChange(idx, 'reverso', e.target.files ? e.target.files[0] : null)&#10;                                            }&#10;                                            className=&quot;border p-1 rounded text-xs h-10&quot;&#10;                                            /&gt;&#10;                                            {ineFiles[idx]?.reverso &amp;&amp; (&#10;                                            &lt;span className=&quot;text-xs text-green-600 mt-1&quot;&gt;&#10;                                                Archivo listo: {ineFiles[idx].reverso.name}&#10;                                            &lt;/span&gt;&#10;                                            )}&#10;                                        &lt;/div&gt;&#10;&#10;                                        {/* Visualizador a la derecha */}&#10;                                        &lt;div&gt;&#10;                                            {ineFiles[idx]?.reverso?.type?.startsWith(&quot;image/&quot;) &amp;&amp; (&#10;                                            &lt;img&#10;                                                src={URL.createObjectURL(ineFiles[idx].reverso)}&#10;                                                alt=&quot;Previsualización INE Reverso&quot;&#10;                                                className=&quot;max-w-[350px] rounded border&quot;&#10;                                            /&gt;&#10;                                            )}&#10;&#10;                                            {ineFiles[idx]?.reverso?.type === &quot;application/pdf&quot; &amp;&amp; (&#10;                                            &lt;a&#10;                                                href={URL.createObjectURL(ineFiles[idx].reverso)}&#10;                                                target=&quot;_blank&quot;&#10;                                                rel=&quot;noopener noreferrer&quot;&#10;                                                className=&quot;text-blue-600 text-xs underline&quot;&#10;                                            &gt;&#10;                                                Ver PDF INE Reverso&#10;                                            &lt;/a&gt;&#10;                                            )}&#10;                                        &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/&gt;&#10;                                    )}&#10;                                &lt;/div&gt;&#10;                                );&#10;                            })}&#10;                            &lt;/form&gt;&#10;&#10;                              {/* Resumen solo en mobile */}&#10;                            &lt;div className=&quot;md:hidden mt-8 p-6 bg-white rounded shadow&quot;&gt;&#10;                                &lt;h4 className=&quot;font-bold text-black mb-3&quot;&gt;Resumen de tu reserva&lt;/h4&gt;&#10;                                &lt;div className=&quot;flex items-center gap-2 text-sm mb-2&quot;&gt;&#10;                                    &lt;span&gt;&lt;/span&gt;&#10;                                    &lt;span className=&quot;capitalize&quot;&gt;{fechaDisplay}&lt;/span&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div className=&quot;flex items-center gap-2 text-sm mb-2&quot;&gt;&#10;                                    &lt;span&gt;⏰&lt;/span&gt;&#10;                                    &lt;span&gt;{selectedTime}&lt;/span&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div className=&quot;text-sm text-gray-500 mb-4&quot;&gt;&#10;                                    Disponibilidad confirmada para {visitantes.length} pase{visitantes.length &gt; 1 ? &quot;s&quot; : &quot;&quot;}&lt;br /&gt;&#10;&#10;                                &lt;/div&gt;&#10;                                {cortesias &gt; 0 &amp;&amp; (&#10;                                &lt;div className=&quot;text-sm text-gray-500 mb-4&quot;&gt;&#10;                                    &#10;                                    {cortesias} Cortesía{cortesias &gt; 1 ? &quot;s&quot; : &quot;&quot;} agregada{cortesias &gt; 1 ? &quot;s&quot; : &quot;&quot;} gratis&#10;                                    &#10;                                &lt;/div&gt;&#10;                                )}&#10;                                &lt;div className=&quot;flex flex-col gap-1 text-sm mb-2&quot;&gt;&#10;                                    &lt;div className=&quot;flex justify-between text-sm&quot;&gt;&#10;                                        &lt;span&gt;Precio Adultos 14+&lt;/span&gt;&#10;                                        &lt;span&gt;${precioAdulto} MXN&lt;/span&gt;&#10;                                    &lt;/div&gt;&#10;                                    {cantidadAdultos60 &gt; 0 &amp;&amp; (&#10;                                    &lt;div className=&quot;flex justify-between text-sm&quot;&gt;&#10;                                        &lt;span&gt;Precio Adultos 60+&lt;/span&gt;&#10;                                        &lt;span&gt;${precioAdulto60} MXN&lt;/span&gt;&#10;                                    &lt;/div&gt;&#10;                                    )}&#10;                                    {cantidadNinos &gt; 0 &amp;&amp; (&#10;                                    &lt;div className=&quot;flex justify-between text-sm&quot;&gt;&#10;                                        &lt;span&gt;PrecioNiños 2-13&lt;/span&gt;&#10;                                        &lt;span&gt;$70 MXN&lt;/span&gt;&#10;                                    &lt;/div&gt;&#10;                                    )}&#10;                                &lt;/div&gt;&#10;                                 &lt;div className=&quot;flex justify-between text-sm mb-2&quot;&gt;&#10;                                &lt;span&gt;Plataforma (5%)&lt;/span&gt;&#10;                                &lt;span&gt;${montoPlataforma.toFixed(2)} MXN&lt;/span&gt;&#10;                            &lt;/div&gt; &lt;div className=&quot;flex justify-between text-sm mb-2&quot;&gt;&#10;                                &lt;span&gt;Terminal e impuestos (5%)&lt;/span&gt;&#10;                                &lt;span&gt;${montoTerminal .toFixed(2)} MXN&lt;/span&gt;&#10;                            &lt;/div&gt; &#10;                            &#10;                                {promoAplicado &amp;&amp; (&#10;                                    &lt;div className=&quot;flex justify-between text-sm text-green-700 font-bold&quot;&gt;&#10;                                    &lt;span&gt;Descuento aplicado&lt;/span&gt;&#10;                                    &lt;span&gt;-${DESCUENTO_PROMO} MXN&lt;/span&gt;&#10;                                    &lt;/div&gt;&#10;                                )}&#10;                                &lt;div className=&quot;flex justify-between text-sm&quot;&gt;&#10;                                &lt;span&gt;Subtotal&lt;/span&gt;&#10;                                &lt;span&gt;${subtotalConDescuento} MXN&lt;/span&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;div className=&quot;flex justify-between font-bold text-base&quot;&gt;&#10;                                &lt;span&gt;Total&lt;/span&gt;&#10;                                &lt;span&gt;${totalConCargos.toFixed(2)} MXN&lt;/span&gt;&#10;                            &lt;/div&gt;&#10;                                {/* Código promocional */}&#10;                                &lt;input&#10;                                    className=&quot;mt-4 w-full border rounded px-2 py-1 text-sm&quot;&#10;                                    placeholder=&quot;Código promocional&quot;&#10;                                    value={codigoPromo}&#10;                                    onChange={e =&gt; setCodigoPromo(e.target.value)}&#10;                                    disabled={promoAplicado}&#10;                                /&gt;&#10;                                &lt;button&#10;                                    type=&quot;button&quot;&#10;                                    className=&quot;mt-2 w-full text-xs font-semibold text-black py-2 border border-gray-300 rounded hover:bg-gray-100&quot;&#10;                                    onClick={aplicarPromo}&#10;                                    disabled={promoAplicado}&#10;                                &gt;&#10;                                    Aplicar&#10;                                &lt;/button&gt;&#10;                                {msgPromo &amp;&amp; (&#10;                                    &lt;div className={`text-xs mt-2 ${promoAplicado ? &quot;text-green-700&quot; : &quot;text-red-600&quot;}`}&gt;&#10;                                    {msgPromo}&#10;                                    &lt;/div&gt;&#10;                                )}&#10;                                 &lt;h4 className=&quot;font-bold mb-3 mt-8&quot;&gt;Resumen de reserva&lt;/h4&gt;&#10;                            {/* Total visible siempre */}&#10;                            &lt;div className=&quot;flex justify-between font-bold text-lg mb-4&quot;&gt;&#10;                                &lt;span&gt;Total:&lt;/span&gt;&#10;                                &lt;span&gt;${totalConCargos.toFixed(2)} MXN&lt;/span&gt;&#10;                            &lt;/div&gt;&#10;                             {/* NUEVO: Método de pago */}&#10;                            &lt;div className=&quot;flex gap-3 mb-4&quot;&gt;&#10;                                &lt;label className=&quot;flex items-center cursor-pointer&quot;&gt;&#10;                                    &lt;input&#10;                                        type=&quot;radio&quot;&#10;                                        className=&quot;mr-2&quot;&#10;                                        name=&quot;metodoPago&quot;&#10;                                        value=&quot;efectivo&quot;&#10;                                        checked={metodoPago === &quot;efectivo&quot;}&#10;                                        onChange={() =&gt; {&#10;                                            setMetodoPago(&quot;efectivo&quot;);&#10;                                            setPaid(true); // Efectivo se considera &quot;pagado&quot;&#10;                                        }}&#10;                                    /&gt;&#10;                                    &lt;span&gt;Efectivo&lt;/span&gt;&#10;                                &lt;/label&gt;&#10;&#10;                            &lt;/div&gt;&#10;                               {paid &amp;&amp; metodoPago === &quot;efectivo&quot; &amp;&amp; (&#10;                                &lt;div className=&quot;mt-4 text-yellow-700 text-center font-bold&quot;&gt;&#10;                                    Presenta este resumen y paga en taquilla.&#10;                                &lt;/div&gt;&#10;                            )}&#10;&#10;&#10;                                {/* Botón finalizar para pago en efectivo */}&#10;                                &lt;button&#10;                                    className={`mt-6 w-full py-2 rounded font-bold text-white ${&#10;                                    (metodoPago === &quot;efectivo&quot; ? puedeFinalizarEfectivo : paid)&#10;                                        ? &quot;bg-[#18668b] hover:bg-[#14526d]&quot;&#10;                                        : &quot;bg-gray-300 cursor-not-allowed&quot;&#10;                                    }`}&#10;                                    onClick={() =&gt; {&#10;                                        handleContinuar();&#10;                                    }}&#10;                                    disabled={metodoPago === &quot;efectivo&quot; ? !puedeFinalizarEfectivo : !paid}&#10;                                &gt;&#10;                                    {metodoPago === &quot;efectivo&quot;&#10;                                    ? &quot;Finalizar y ver resumen para pago en efectivo&quot;&#10;                                    : &quot;Continuar al resumen&quot;}&#10;                                &lt;/button&gt;&#10;                                &lt;div className=&quot;mt-4 text-xs text-gray-500&quot;&gt;&#10;                                    Los pases son válidos para la fecha y hora seleccionada.&lt;br /&gt;&#10;                                    Pago 100% seguro. Puedes cancelar hasta 48 horas antes de tu visita.&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                          &lt;button&#10;                                className=&quot;mt-20 w-full py-7 rounded font-bold text-[#18668b] bg-white hover:bg-[#d6d3d3] border border-[#18668b]&quot;&#10;                                onClick={() =&gt; setPaso(1)}&#10;                            &gt;&#10;                                Volver a datos de huéspedes&#10;                            &lt;/button&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                    )}&#10;            &lt;/section&gt;&#10;             {/* Columna imagen */}&#10;            &lt;aside className=&quot;hidden md:flex w-1/2 h-full items-center justify-center bg-[#f8fafc]&quot;&gt;&#10;                &lt;div className=&quot;relative w-full h-full flex items-center justify-center&quot;&gt;&#10;                &lt;img&#10;                    src={imagenes[paso - 1]}&#10;                    alt={pasos[paso - 1].label}&#10;                    className=&quot;object-cover w-full h-[945px]  shadow&quot;&#10;                /&gt;&#10;&#10;                &lt;/div&gt;&#10;                {paso === 3 &amp;&amp; (&#10;                    &lt;&gt;&#10;                        &lt;div className=&quot;  p-6 mb-6&quot;&gt;&#10;                            &lt;h4 className=&quot;font-bold text-black mb-3&quot;&gt;Resumen de tu reserva&lt;/h4&gt;&#10;                            &lt;div className=&quot;flex items-center gap-2 text-sm mb-2&quot;&gt;&#10;                                &lt;span&gt;&lt;/span&gt;&#10;                                &lt;span className=&quot;capitalize&quot;&gt;{fechaDisplay}&lt;/span&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;div className=&quot;flex items-center gap-2 text-sm mb-2&quot;&gt;&#10;                                &lt;span&gt;⏰&lt;/span&gt;&#10;                                &lt;span&gt;{selectedTime}&lt;/span&gt;&#10;                            &lt;/div&gt;&#10;                          &lt;div className=&quot;text-sm text-gray-500 mb-4&quot;&gt;&#10;                            Disponibilidad confirmada para {visitantes.length} pase{visitantes.length &gt; 1 ? &quot;s&quot; : &quot;&quot;}&lt;br /&gt;&#10;&#10;                        &lt;/div&gt;&#10;                        {cortesias &gt; 0 &amp;&amp; (&#10;                          &lt;div className=&quot;text-sm text-gray-500 mb-4&quot;&gt;&#10;&#10;                             {cortesias} Cortesía{cortesias &gt; 1 ? &quot;s&quot; : &quot;&quot;} agregada{cortesias &gt; 1 ? &quot;s&quot; : &quot;&quot;} gratis&#10;&#10;                        &lt;/div&gt;&#10;                        )}&#10;                            &lt;div className=&quot;flex justify-between mb-1 text-sm&quot;&gt;&#10;                                &lt;span className=&quot;text-black&quot;&gt;Pases de Acceso General&lt;/span&gt;&#10;                                &lt;span className=&quot;text-black&quot;&gt;{visitantes.length} pases&lt;/span&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;div className=&quot;flex justify-between text-sm&quot;&gt;&#10;                                &lt;span&gt;Precio Adultos 14+&lt;/span&gt;&#10;                                &lt;span&gt;${precioAdulto} MXN&lt;/span&gt;&#10;                            &lt;/div&gt;&#10;                            {cantidadAdultos60 &gt; 0 &amp;&amp; (&#10;                               &lt;div className=&quot;flex justify-between text-sm&quot;&gt;&#10;                                &lt;span&gt;Precio Adultos 60+&lt;/span&gt;&#10;                                &lt;span&gt;${precioAdulto60} MXN&lt;/span&gt;&#10;                            &lt;/div&gt;&#10;                            )}&#10;                             {cantidadNinos &gt; 0 &amp;&amp; (&#10;                              &lt;div className=&quot;flex justify-between text-sm&quot;&gt;&#10;                                &lt;span&gt;PrecioNiños 2-13&lt;/span&gt;&#10;                                &lt;span&gt;$70 MXN&lt;/span&gt;&#10;                            &lt;/div&gt;&#10;                            )}&#10;&#10;                             &lt;div className=&quot;flex justify-between text-sm&quot;&gt;&#10;                                &lt;span&gt;Plataforma (5%)&lt;/span&gt;&#10;                                &lt;span&gt;${montoPlataforma.toFixed(2)} MXN&lt;/span&gt;&#10;                            &lt;/div&gt; &lt;div className=&quot;flex justify-between text-sm&quot;&gt;&#10;                                &lt;span&gt;Terminal e impuestos (5%)&lt;/span&gt;&#10;                                &lt;span&gt;${montoTerminal .toFixed(2)} MXN&lt;/span&gt;&#10;                            &lt;/div&gt; &#10;                            &#10;                            {promoAplicado &amp;&amp; (&#10;                                &lt;div className=&quot;flex justify-between text-sm text-green-700 font-bold&quot;&gt;&#10;                                    &lt;span&gt;Descuento aplicado&lt;/span&gt;&#10;                                    &lt;span&gt;-${DESCUENTO_PROMO} MXN&lt;/span&gt;&#10;                                &lt;/div&gt;&#10;                            )}&#10;                             &lt;div className=&quot;flex justify-between text-sm&quot;&gt;&#10;                                &lt;span&gt;Subtotal&lt;/span&gt;&#10;                                &lt;span&gt;${subtotalConDescuento} MXN&lt;/span&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;div className=&quot;flex justify-between font-bold text-base&quot;&gt;&#10;                                &lt;span&gt;Total&lt;/span&gt;&#10;                                &lt;span&gt;${totalConCargos.toFixed(2)} MXN&lt;/span&gt;&#10;                            &lt;/div&gt;&#10;&#10;&#10;                            {/* Código promocional */}&#10;                            &lt;input&#10;                                className=&quot;mt-4 w-full border rounded px-2 py-1 text-sm&quot;&#10;                                placeholder=&quot;Código promocional&quot;&#10;                                value={codigoPromo}&#10;                                onChange={e =&gt; setCodigoPromo(e.target.value)}&#10;                                disabled={promoAplicado}&#10;                            /&gt;&#10;                            &lt;button&#10;                                type=&quot;button&quot;&#10;                                className=&quot;mt-2 w-full text-xs font-semibold text-black py-2 border border-gray-300 rounded hover:bg-gray-100&quot;&#10;                                onClick={aplicarPromo}&#10;                                disabled={promoAplicado}&#10;                            &gt;&#10;                                Aplicar&#10;                            &lt;/button&gt;&#10;                            {msgPromo &amp;&amp; (&#10;                                &lt;div className={`text-xs mt-2 ${promoAplicado ? &quot;text-green-700&quot; : &quot;text-red-600&quot;}`}&gt;&#10;                                    {msgPromo}&#10;                                &lt;/div&gt;&#10;                            )}&#10;&#10;                            &lt;h4 className=&quot;font-bold mb-3 mt-8&quot;&gt;Resumen de reserva&lt;/h4&gt;&#10;                            {/* Total visible siempre */}&#10;                            &lt;div className=&quot;flex justify-between font-bold text-lg mb-4&quot;&gt;&#10;                                &lt;span&gt;Total:&lt;/span&gt;&#10;                                &lt;span&gt;${totalConCargos.toFixed(2)} MXN&lt;/span&gt;&#10;                            &lt;/div&gt;&#10;&#10;                            {/* NUEVO: Método de pago */}&#10;                            &lt;div className=&quot;flex gap-3 mb-4&quot;&gt;&#10;                                &lt;label className=&quot;flex items-center cursor-pointer&quot;&gt;&#10;                                    &lt;input&#10;                                        type=&quot;radio&quot;&#10;                                        className=&quot;mr-2&quot;&#10;                                        name=&quot;metodoPago&quot;&#10;                                        value=&quot;efectivo&quot;&#10;                                        checked={metodoPago === &quot;efectivo&quot;}&#10;                                        onChange={() =&gt; {&#10;                                            setMetodoPago(&quot;efectivo&quot;);&#10;                                            setPaid(true); // Efectivo se considera &quot;pagado&quot;&#10;                                        }}&#10;                                    /&gt;&#10;                                    &lt;span&gt;Efectivo&lt;/span&gt;&#10;                                &lt;/label&gt;&#10;&#10;                            &lt;/div&gt;&#10;&#10;&#10;                            {paid &amp;&amp; metodoPago === &quot;efectivo&quot; &amp;&amp; (&#10;                                &lt;div className=&quot;mt-4 text-yellow-700 text-center font-bold&quot;&gt;&#10;                                    Presenta este resumen y paga en taquilla.&#10;                                &lt;/div&gt;&#10;                            )}&#10;&#10;                            &lt;button&#10;                              className={`mt-6 w-full py-2 rounded font-bold text-white ${&#10;                                (metodoPago === &quot;efectivo&quot; ? puedeFinalizarEfectivo : paid)&#10;                                  ? &quot;bg-[#18668b] hover:bg-[#14526d]&quot;&#10;                                  : &quot;bg-gray-300 cursor-not-allowed&quot;&#10;                              }`}&#10;                               onClick={() =&gt; {&#10;                                        handleContinuar();&#10;                                    }}&#10;                              disabled={metodoPago === &quot;efectivo&quot; ? !puedeFinalizarEfectivo : !paid}&#10;                            &gt;&#10;                              {metodoPago === &quot;efectivo&quot;&#10;                                ? &quot;Finalizar y ver resumen para pago en efectivo&quot;&#10;                                : &quot;Continuar al resumen&quot;}&#10;                            &lt;/button&gt;&#10;&#10;                            &lt;div className=&quot;mt-4 text-xs text-gray-500&quot;&gt;&#10;                                Los pases son válidos para la fecha y hora seleccionada.&lt;br /&gt;&#10;                                Pago 100% seguro. Puedes cancelar hasta 48 horas antes de tu visita.&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/&gt;&#10;                    )}&#10;&#10;&#10;            &lt;/aside&gt;&#10;            &lt;/main&gt;&#10;            {/* &lt;Footer /&gt; */}&#10;          &lt;/div&gt;&#10;    );&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>